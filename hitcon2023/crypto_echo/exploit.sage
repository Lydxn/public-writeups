from Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b
from shlex import quote
from pwn import *
import random
from re import findall
from subprocess import check_output
import string


def flatter(M):
    # compile https://github.com/keeganryan/flatter and put it in $PATH
    z = "[[" + "]\n[".join(" ".join(map(str, row)) for row in M) + "]]"
    ret = check_output(["flatter"], input=z.encode())
    return matrix(M.nrows(), M.ncols(), map(int, findall(b"-?\\d+", ret)))


def generate():
    while True:
        r = ''.join(random.choices(string.ascii_letters, k=2))
        prefix = b2l(b"echo '" + r.encode())
        factors_w_exp = factor(prefix)
        factors = []
        for p, e in factors_w_exp:
            for i in range(e):
                factors.append(p)
        random.shuffle(factors)

        base1 = prod(factors[:len(factors) // 2])
        base2 = prod(factors[len(factors) // 2:])
        assert base1 * base2 == prefix

        x = base1 * 256 ** 7 + 13
        y = base2 * 256 ** 7 + 3
        z = base1 * 256 ** 8 + 13
        v = base2 * 256 ** 8 + 3

        A = x * y
        B = z * v
        C = x * v
        D = y * z

        c = 0
        for x in [A, B, C, D]:
            if all([a < 128 for a in l2b(x)]) and msg.encode().decode() == msg:
                c += 1
        if c == 4:
            break

    print(l2b(A))
    print(l2b(B))
    print(l2b(C))
    print(l2b(D))

    return [A, B, C, D]

r = remote("chal-echo.chal.hitconctf.com", int(22222))
signal.alarm(60)
# r = remote("localhost", int(22222))

echo_pairs = [
    [
        b"echo 'NO`\x03:-BGv\x00\x00\x00\x00\x00\x00'", 
        b"echo 'NO\x00`\x03:-BGv\x00\x00\x00\x00\x00\x00\x00'", 
        b"echo 'NO\x00`\x03:-kMG\x00\x00\x00\x00\x00\x00'", 
        b"echo 'NO`\x03:-B\x1ep/\x00\x00\x00\x00\x00\x00'", 
    ], 
    [
        b"echo 'DL3NW\x08d\x08\x13\x00\x00\x00\x00\x00\x00'", 
        b"echo 'DJ\x023NW\x08d\x08\x13\x00\x00\x00\x00\x00\x00\x00'", 
        b"echo 'DL3NW\x08d\x01\x15\x05\x00\x00\x00\x00\x00\x00'", 
        b"echo 'DJ\x023NW\x08k\x06\x0e\x00\x00\x00\x00\x00\x00'", 
    ], 
    [
        b"echo 'oB\x14Da\x1aY\x03}\x00\x00\x00\x00\x00\x00'", 
        b"echo 'oB\x00\x14Da\x1aY\x03}\x00\x00\x00\x00\x00\x00\x00'", 
        b"echo 'oB\x00\x14Da\x1b\x1bZc\x00\x00\x00\x00\x00\x00'", 
        b"echo 'oB\x14Da\x1aXA&\x1a\x00\x00\x00\x00\x00\x00'", 
    ], 
    [
        b"echo 'UW\x00\x0eE-h\x1fn\x00\x00\x00\x00\x00\x00'", 
        b"echo 'UW\x00\x00\x0eE-h\x1fn\x00\x00\x00\x00\x00\x00\x00'", 
        b"echo 'UW\x00\x00\x0eFAjK+\x00\x00\x00\x00\x00\x00'", 
        b"echo 'UW\x00\x0eE,T\x1dBC\x00\x00\x00\x00\x00\x00'", 
    ], 
    [
        b"echo 'KQ3NW\x08d\x08:\x00\x00\x00\x00\x00\x00'", 
        b"echo 'KO\x023NW\x08d\x08:\x00\x00\x00\x00\x00\x00\x00'", 
        b"echo 'KQ3NW\x08d\x01<\x05\x00\x00\x00\x00\x00\x00'", 
        b"echo 'KO\x023NW\x08k\x065\x00\x00\x00\x00\x00\x00'", 
    ]
]

kn = []
for echo_pair in echo_pairs:
    sigs = []
    for v in echo_pair:
        r.sendlineafter("> ", "1")
        r.sendlineafter(": ", v[6:-1])
        r.recvuntil("Signature: ")
        sigs.append(int(r.recvline()))

    a, b = sigs[0] * sigs[1], sigs[2] * sigs[3]
    if b < a:
        a, b = b, a
    kn.append(b - a)

modulus = gcd(gcd(gcd(gcd(kn[0], kn[1]), kn[2]), kn[3]), kn[4])
if modulus % 2 == 0:
    modulus //= 2
assert int(modulus).bit_length() == 512

print("modulus", modulus)

for k in range(100, 200):
    print(k)
    c = b2l(b"./give me flag please;" + b'\x00' * k)
    M = Matrix(ZZ, k+2, k+2)
    M[:k+1, :k+1] = Matrix.identity(k+1)
    for i in range(k):
        M[i, -1] = 256 ** (k - i - 1)
        M[-2, i] = -80
    M[-2, -2] = 1
    M[-2, -1] = c
    M[-1, -1] = -modulus
    # M = M.LLL()
    M = flatter(M)

    for row in M:
        if row[-1] == 0 and row[-2] == 1:
            try:
                print("Found")
                suffix = [row[i] + 80 for i in range(k)]
                if (not all([0 <= c < 128 for c in suffix])) or (0xa in suffix):
                    print("no..")
                    print(suffix)
                    continue
                print("Okay")
                suffix = bytes(suffix)
                print(suffix)
                assert b2l(b"./give me flag please;" + suffix) % modulus == 0
                r.sendlineafter("> ", "2")
                r.sendlineafter(": ", b"./give me flag please;" + suffix)
                r.sendlineafter(": ", b"0")
                r.interactive()
            except:
                pass
