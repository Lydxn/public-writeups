block_0x0:
  0x0: JMP 0x432
block_0x42e:
  0x42e: VTABLEJMP  offset R13
  - target block_0x46e

func_0x46e:
  0x46e: MOV R5, [0x471] // mem[0x471] = 0x0
  0x47b: MOV R6, [0x481] // mem[0x481] = 0x0
  0x48b: MOV R4, [0x491] // mem[0x491] = 0x92
  0x49b: ZERO R0
  0x49e: CALL  return slot [0x4c0]
  - target block_0x132a
  - target block_0x552
block_0x552:
  0x552: MOV R4, [0x555] // mem[0x555] = 0x0
  0x55f: ZERO R0
  0x562: CALL  return slot [0x584]
  - target block_0xf4f
  - target block_0x616
block_0x616:
  0x616: MOV R4, [0x619] // mem[0x619] = 0xa7
  0x623: ZERO R0
  0x626: CALL  return slot [0x648]
  - target block_0x132a
  - target block_0x6da
block_0x6da:
  0x6da: MOV R4, [0x6dd] // mem[0x6dd] = 0x0
  0x6e7: ZERO R0
  0x6ea: CALL  return slot [0x70c]
  - target block_0x132a
  - target block_0x79e

# func_79e checks flag in 8-byte increments
#
func_0x79e:
  0x79e: MOV R4, [0x7a1] // mem[0x7a1] = 0x0
  0x7ab: MOV R4, [0x7b1] // mem[0x7b1] = 0x0
  0x7bb: ADD R4, R6
  0x7c4: BOUNDS_CHECK R4 R0

# sum1
# Call 0x167a(..., 0x41)

block_0x7dc:
  0x7dc: MOV R5, [0x7e2] // mem[0x7e2] = 0x41
  0x7ec: ZERO R0
  0x7ef: CALL  return slot [0x811]
  - target block_0x167a
  - target block_0x8a3
block_0x8a3:
  0x8a3: MOV R4, [0x8a6] // mem[0x8a6] = 0x0
  0x8b0: ADD R4, R6
  0x8b9: BOUNDS_CHECK R4 R0

# memcpy 8
# Call 0xa6c8(..., 0x41)
block_0x8d1:
  0x8d1: MOV R5, [0x8d7] // mem[0x8d7] = 0x41
  0x8e1: ZERO R0
  0x8e4: CALL  return slot [0x906]
  - target block_0xa6c8
  - target block_0x998

# sum2
# Call 0x6458(..., 0x41)
block_0x998:
  0x998: MOV R4, [0x99b] // mem[0x99b] = 0x0
  0x9a5: MOV R4, [0x9ab] // mem[0x9ab] = 0x0
  0x9b5: ADD R4, R6
  0x9be: BOUNDS_CHECK R4 R0
block_0x9d6:
  0x9d6: MOV R5, [0x9dc] // mem[0x9dc] = 0x41
  0x9e6: ZERO R0
  0x9e9: CALL  return slot [0xa0b]
  - target block_0x6458
  - target block_0xa9d

# shuffle
# Call 0xa6c8(..., 0x41)
block_0xa9d:
  0xa9d: MOV R4, [0xaa0] // mem[0xaa0] = 0x0
  0xaaa: ADD R4, R6
  0xab3: BOUNDS_CHECK R4 R0
block_0xacb:
  0xacb: MOV R5, [0xad1] // mem[0xad1] = 0x41
  0xadb: ZERO R0
  0xade: CALL  return slot [0xb00]
  - target block_0xa6c8
  - target block_0xb92

# Jump back to start if not equal to 0x40
block_0xb92:
  0xb92: ADD R6, [0xb95] // mem[0xb95] = 0x8
  0xb9c: BOUNDS_CHECK R6 R0
block_0xbb4:
  0xbb4: ZERO R0
  0xbb7: JMP 0xbbf
block_0xbbb:
  0xbbb: ADD R1, R6
  0xbc5: Jne [0x1] != [0xbba] block_0xbd7 block_0xc13 // mem[0xbba] = 0x40
block_0xbd7:
  0xbd7: VTABLEJMP  offset R13
  - target block_0x79e

# After done, 
# Loop over all the elements (there are 64...)
# Get one from memory, 
block_0xc13:
  0xc13: ZERO R1
block_0xc16:
  0xc16: MOV R6, [0xc19] // mem[0xc19] = 0x0
  0xc23: MOV R4, [0xc29] // mem[0xc29] = 0x0
  0xc33: ADD R4, R6
  0xc3c: BOUNDS_CHECK R4 R0
block_0xc54:
  0xc54: ADD R1, R4
  0xc5d: ADD R1, R12
  0xc66: MOV R4, [R1]
  0xc7e: MOV R5, [0xc87] // mem[0xc87] = 0x52
  0xc91: ADD R5, R6
  0xc9a: BOUNDS_CHECK R5 R0
block_0xcb2:
  0xcb2: ADD R1, R5
  0xcbb: ADD R1, R12
  0xcc4: MOV R5, [R1]
  0xcdc: ADD R1, R4
  0xcec: Jne [0x1] != R5 block_0xcfe block_0xd3a
block_0xcfe:
  0xcfe: VTABLEJMP  offset R13
  - target block_0xe88
block_0xd3a:
  0xd3a: ZERO R1
block_0xd3d:
  0xd3d: ADD R6, [0xd40] // mem[0xd40] = 0x1
  0xd47: BOUNDS_CHECK R6 R0
block_0xd5f:
  0xd5f: ZERO R0
  0xd62: JMP 0xd6a
block_0xd66:
  0xd66: ADD R1, R6
  0xd70: Jne [0x1] != [0xd65] block_0xd82 block_0xdbe // mem[0xd65] = 0x40
block_0xd82:
  0xd82: VTABLEJMP  offset R13
  - target block_0xc26
block_0xdbe:
  0xdbe: ZERO R1

#
# SUCCESS IS HERE
#
block_0xdc1:
  0xdc1: MOV R4, [0xdc4] // mem[0xdc4] = 0xb4
  0xdce: ZERO R0
  0xdd1: CALL  return slot [0xdf3]
  - target block_0x132a
  - target block_0xe85
block_0xe85:
  0xe85: JMP 0xffffffffffffffff

// success block
func_0xe88:
  0xe88: MOV R4, [0xe8b] // mem[0xe8b] = 0xd0
  0xe95: ZERO R0
  0xe98: CALL  return slot [0xeba]
  - target block_0x132a
  - target block_0xf4c
block_0xf4c:
  0xf4c: JMP 0xffffffffffffffff

func_0xf4f:
  0xf4f: MOV R3, R8
  0xf58: ZERO R0
  0xf5b: PUSH R4 (shift=[0xf5e]) // val = 0x0, offs = 0x1
  0xfc5: ZERO R0
  0xfc8: ZERO R1
  0xfcb: PUSH R7 (shift=[0xfce]) // val = 0x0, offs = 0x1
  0x1035: MOV R7, R8
  0x1044: ZERO R0
  0x1047: MemSub [0x8] -= [0x104a] //  // mem[0x104a] = 0x0
block_0x104e:
  0x104e: BOUNDS_CHECK R8 R0
block_0x1063:
  0x1063: MOV R3, [0x1069] // mem[0x1069] = 0x0
  0x1073: ZERO R0
  0x1076: MemSub [0x3] -= input() // 
  0x1079: MemSub [0x3] -= [0xa] // 
  0x107c: MemSub [0x3] -= [0x0] // 
  0x107c: JumpIf [0x3] <= 0: 0x1082 // 
block_0x107f:
  0x107f: JMP 0x1088
block_0x1082:
  0x1082: MemSub [0x0] -= [0x3] // 
block_0x1082:
  0x1082: JumpIf [0x0] <= 0: 0x108b // 
block_0x1085:
  0x1085: ZERO R0
block_0x1088:
  0x1088: MemSub [0x3] -= [0xb] // 
block_0x108b:
  0x108b: ZERO R0
  0x108e: JMP 0x1096
block_0x1092:
  0x1092: ADD R1, R3
  0x109c: Jeq [0x1] == [0x1091] block_0x10ae block_0x10ea // mem[0x1091] = 0xa
block_0x10ae:
  0x10ae: VTABLEJMP  offset R13
  - target block_0x1197
block_0x10ea:
  0x10ea: MOV R1, R4
  0x10f3: ADD R1, R12
  0x10fc: MOV [R1], R3
  0x112c: ZERO R0
  0x112f: ZERO R1
  0x1132: JMP 0x1136
block_0x10ed:
  0x10ed: ADD R1, R4
  0x10f3: ADD R1, R12
  0x10fc: MOV [R1], R3
  0x112c: ADD R4, [0x1135] // mem[0x1135] = 0x1
  0x113c: BOUNDS_CHECK R4 R0
block_0x1154:
  0x1154: ZERO R0
  0x1157: VTABLEJMP  offset R13
  - target block_0x1066

func_0x1197:
  0x1197: MOV R3, [0x119a] // mem[0x119a] = 0x0
  0x11a4: ADD R1, R4
  0x11ad: ADD R1, R12
  0x11b6: MOV [R1], R3
  0x11e6: MOV R8, R7
  0x11f5: POP R7 (shift=[0x1228]) // val = 0x0, offs = 0x1
block_0x1247:
  0x1247: POP R4 (shift=[0x127a]) // val = 0x0, offs = 0x1
block_0x1299:
  0x1299: POP R3 (shift=[0x12cc]) // val = 0x0, offs = 0x1
block_0x12eb:
  0x12eb: MOV R9, R3
  0x12fa: ADD R1, R3
  0x1303: ADD R1, R13
  0x130c: JMP [R1]

func_0x132a:
  0x132a: MOV R3, R8
  0x1333: ZERO R0
  0x1336: PUSH R4 (shift=[0x1339]) // val = 0x0, offs = 0x1
  0x13a0: ZERO R0
  0x13a3: ZERO R1
  0x13a6: PUSH R7 (shift=[0x13a9]) // val = 0x0, offs = 0x1
  0x1410: MOV R7, R8
  0x141f: ZERO R0
  0x1422: MemSub [0x8] -= [0x1425] //  // mem[0x1425] = 0x0
block_0x1429:
  0x1429: BOUNDS_CHECK R8 R0
block_0x143e:
  0x143e: ADD R1, R4
  0x1447: ADD R1, R12
  0x1450: MOV R3, [R1]
  0x1468: ZERO R0
  0x146b: ZERO R1
  0x146e: JMP 0x1476
block_0x1472:
  0x1472: ADD R1, R3
  0x147c: Jeq [0x1] == [0x1471] block_0x148e block_0x14ca // mem[0x1471] = 0x0
block_0x148e:
  0x148e: VTABLEJMP  offset R13
  - target block_0x1535
block_0x14ca:
  0x14ca: ZERO R1
block_0x14cd:
  0x14cd: Print [0x3] // 
  0x14d0: ADD R4, [0x14d3] // mem[0x14d3] = 0x1
  0x14da: BOUNDS_CHECK R4 R0
block_0x14f2:
  0x14f2: ZERO R0
  0x14f5: VTABLEJMP  offset R13
  - target block_0x1441

func_0x1535:
  0x1535: Print [0x1538] // 
  0x153c: MOV R8, R7
  0x1545: POP R7 (shift=[0x1578]) // val = 0x0, offs = 0x1
block_0x1597:
  0x1597: POP R4 (shift=[0x15ca]) // val = 0x0, offs = 0x1
block_0x15e9:
  0x15e9: POP R3 (shift=[0x161c]) // val = 0x0, offs = 0x1
block_0x163b:
  0x163b: MOV R9, R3
  0x164a: ADD R1, R3
  0x1653: ADD R1, R13
  0x165c: JMP [R1]

func_0x167a:
  0x167a: MOV R3, R8
  0x1683: ZERO R0
  0x1686: PUSH R4 (shift=[0x1689]) // val = 0x0, offs = 0x1
  0x16f0: ZERO R0
  0x16f3: ZERO R1
  0x16f6: PUSH R5 (shift=[0x16f9]) // val = 0x0, offs = 0x1
  0x1760: ZERO R0
  0x1763: ZERO R1
  0x1766: PUSH R7 (shift=[0x1769]) // val = 0x0, offs = 0x1
  0x17d0: MOV R7, R8
  0x17df: ZERO R0
  0x17e2: MemSub [0x8] -= [0x17e5] //  // mem[0x17e5] = 0x0
block_0x17e9:
  0x17e9: BOUNDS_CHECK R8 R0
block_0x17fe:
  0x17fe: BUF_STORE [0x1887], [R7 + [0x1810]], [0x1862] // mem[0x1810] = 0x1, mem[0x1862] = 0x0
  0x18d3: BUF_LOAD R3, [R7 + [0x18e8]], [0x193a] // mem[0x18e8] = 0x2, mem[0x193a] = 0x0
  0x1983: MOV R1, R5
  0x198f: ADD R1, R12
  0x1998: MOV R4, [R1]
  0x19b0: ZERO R0
  0x19b3: ZERO R1
  0x19b6: MemSub [0x4] -= [0x3] // 
block_0x19b9:
  0x19b9: BOUNDS_CHECK R4 R0
block_0x19ce:
  0x19ce: ADD R1, R5
  0x19d7: ADD R1, R12
  0x19e0: MOV [R1], R4
  0x1a10: BUF_LOAD R3, [R7 + [0x1a25]], [0x1a77] // mem[0x1a25] = 0x2, mem[0x1a77] = 0x2
  0x1ac0: MOV R1, R5
  0x1acc: ADD R1, R12
  0x1ad5: MOV R4, [R1]
  0x1aed: ADD R4, R3
  0x1af9: BOUNDS_CHECK R4 R0
block_0x1b11:
  0x1b11: ADD R1, R5
  0x1b1a: ADD R1, R12
  0x1b23: MOV [R1], R4
  0x1b53: BUF_LOAD R3, [R7 + [0x1b68]], [0x1bba] // mem[0x1b68] = 0x2, mem[0x1bba] = 0x3
  0x1c03: MOV R1, R5
  0x1c0f: ADD R1, R12
  0x1c18: MOV R4, [R1]
  0x1c30: ZERO R0
  0x1c33: ZERO R1
  0x1c36: MemSub [0x4] -= [0x3] // 
block_0x1c39:
  0x1c39: BOUNDS_CHECK R4 R0
block_0x1c4e:
  0x1c4e: ADD R1, R5
  0x1c57: ADD R1, R12
  0x1c60: MOV [R1], R4
  0x1c90: BUF_LOAD R3, [R7 + [0x1ca5]], [0x1cf7] // mem[0x1ca5] = 0x2, mem[0x1cf7] = 0x5
  0x1d40: MOV R1, R5
  0x1d4c: ADD R1, R12
  0x1d55: MOV R4, [R1]
  0x1d6d: ZERO R0
  0x1d70: ZERO R1
  0x1d73: MemSub [0x4] -= [0x3] // 
block_0x1d76:
  0x1d76: BOUNDS_CHECK R4 R0
block_0x1d8b:
  0x1d8b: ZERO R0
  0x1d8e: MemSub [0x4] -= [0x3] // 
block_0x1d91:
  0x1d91: BOUNDS_CHECK R4 R0
block_0x1da6:
  0x1da6: ADD R1, R5
  0x1daf: ADD R1, R12
  0x1db8: MOV [R1], R4
  0x1de8: BUF_LOAD R3, [R7 + [0x1dfd]], [0x1e4f] // mem[0x1dfd] = 0x2, mem[0x1e4f] = 0x6
  0x1e98: MOV R1, R5
  0x1ea4: ADD R1, R12
  0x1ead: MOV R4, [R1]
  0x1ec5: ZERO R0
  0x1ec8: ZERO R1
  0x1ecb: MemSub [0x4] -= [0x3] // 
block_0x1ece:
  0x1ece: BOUNDS_CHECK R4 R0
block_0x1ee3:
  0x1ee3: ADD R1, R5
  0x1eec: ADD R1, R12
  0x1ef5: MOV [R1], R4
  0x1f25: BUF_LOAD R3, [R7 + [0x1f3a]], [0x1f8c] // mem[0x1f3a] = 0x2, mem[0x1f8c] = 0x7
  0x1fd5: MOV R1, R5
  0x1fe1: ADD R1, R12
  0x1fea: MOV R4, [R1]
  0x2002: ZERO R0
  0x2005: ZERO R1
  0x2008: MemSub [0x4] -= [0x3] // 
block_0x200b:
  0x200b: BOUNDS_CHECK R4 R0
block_0x2020:
  0x2020: ZERO R0
  0x2023: MemSub [0x4] -= [0x3] // 
block_0x2026:
  0x2026: BOUNDS_CHECK R4 R0
block_0x203b:
  0x203b: ADD R1, R5
  0x2044: ADD R1, R12
  0x204d: MOV [R1], R4
  0x207d: BUF_STORE [0x2109], [R7 + [0x2092]], [0x20e4] // mem[0x2092] = 0x1, mem[0x20e4] = 0x1
  0x2155: BUF_LOAD R3, [R7 + [0x216a]], [0x21bc] // mem[0x216a] = 0x2, mem[0x21bc] = 0x1
  0x2205: MOV R1, R5
  0x2211: ADD R1, R12
  0x221a: MOV R4, [R1]
  0x2232: ZERO R0
  0x2235: ZERO R1
  0x2238: MemSub [0x4] -= [0x3] // 
block_0x223b:
  0x223b: BOUNDS_CHECK R4 R0
block_0x2250:
  0x2250: ADD R1, R5
  0x2259: ADD R1, R12
  0x2262: MOV [R1], R4
  0x2292: BUF_LOAD R3, [R7 + [0x22a7]], [0x22f9] // mem[0x22a7] = 0x2, mem[0x22f9] = 0x2
  0x2342: MOV R1, R5
  0x234e: ADD R1, R12
  0x2357: MOV R4, [R1]
  0x236f: ZERO R0
  0x2372: ZERO R1
  0x2375: MemSub [0x4] -= [0x3] // 
block_0x2378:
  0x2378: BOUNDS_CHECK R4 R0
block_0x238d:
  0x238d: ADD R1, R5
  0x2396: ADD R1, R12
  0x239f: MOV [R1], R4
  0x23cf: BUF_LOAD R3, [R7 + [0x23e4]], [0x2436] // mem[0x23e4] = 0x2, mem[0x2436] = 0x3
  0x247f: MOV R1, R5
  0x248b: ADD R1, R12
  0x2494: MOV R4, [R1]
  0x24ac: ZERO R0
  0x24af: ZERO R1
  0x24b2: MemSub [0x4] -= [0x3] // 
block_0x24b5:
  0x24b5: BOUNDS_CHECK R4 R0
block_0x24ca:
  0x24ca: ZERO R0
  0x24cd: MemSub [0x4] -= [0x3] // 
block_0x24d0:
  0x24d0: BOUNDS_CHECK R4 R0
block_0x24e5:
  0x24e5: ADD R1, R5
  0x24ee: ADD R1, R12
  0x24f7: MOV [R1], R4
  0x2527: BUF_LOAD R3, [R7 + [0x253c]], [0x258e] // mem[0x253c] = 0x2, mem[0x258e] = 0x4
  0x25d7: MOV R1, R5
  0x25e3: ADD R1, R12
  0x25ec: MOV R4, [R1]
  0x2604: ZERO R0
  0x2607: ZERO R1
  0x260a: MemSub [0x4] -= [0x3] // 
block_0x260d:
  0x260d: BOUNDS_CHECK R4 R0
block_0x2622:
  0x2622: ADD R1, R5
  0x262b: ADD R1, R12
  0x2634: MOV [R1], R4
  0x2664: BUF_LOAD R3, [R7 + [0x2679]], [0x26cb] // mem[0x2679] = 0x2, mem[0x26cb] = 0x5
  0x2714: MOV R1, R5
  0x2720: ADD R1, R12
  0x2729: MOV R4, [R1]
  0x2741: ADD R4, R3
  0x274d: BOUNDS_CHECK R4 R0
block_0x2765:
  0x2765: ADD R4, R3
  0x276e: BOUNDS_CHECK R4 R0
block_0x2786:
  0x2786: ADD R1, R5
  0x278f: ADD R1, R12
  0x2798: MOV [R1], R4
  0x27c8: BUF_LOAD R3, [R7 + [0x27dd]], [0x282f] // mem[0x27dd] = 0x2, mem[0x282f] = 0x6
  0x2878: MOV R1, R5
  0x2884: ADD R1, R12
  0x288d: MOV R4, [R1]
  0x28a5: ZERO R0
  0x28a8: ZERO R1
  0x28ab: MemSub [0x4] -= [0x3] // 
block_0x28ae:
  0x28ae: BOUNDS_CHECK R4 R0
block_0x28c3:
  0x28c3: ZERO R0
  0x28c6: MemSub [0x4] -= [0x3] // 
block_0x28c9:
  0x28c9: BOUNDS_CHECK R4 R0
block_0x28de:
  0x28de: ZERO R0
  0x28e1: MemSub [0x4] -= [0x3] // 
block_0x28e4:
  0x28e4: BOUNDS_CHECK R4 R0
block_0x28f9:
  0x28f9: ADD R1, R5
  0x2902: ADD R1, R12
  0x290b: MOV [R1], R4
  0x293b: BUF_LOAD R3, [R7 + [0x2950]], [0x29a2] // mem[0x2950] = 0x2, mem[0x29a2] = 0x7
  0x29eb: MOV R1, R5
  0x29f7: ADD R1, R12
  0x2a00: MOV R4, [R1]
  0x2a18: ADD R4, R3
  0x2a24: BOUNDS_CHECK R4 R0
block_0x2a3c:
  0x2a3c: ADD R4, R3
  0x2a45: BOUNDS_CHECK R4 R0
block_0x2a5d:
  0x2a5d: ADD R1, R5
  0x2a66: ADD R1, R12
  0x2a6f: MOV [R1], R4
  0x2a9f: BUF_STORE [0x2b2b], [R7 + [0x2ab4]], [0x2b06] // mem[0x2ab4] = 0x1, mem[0x2b06] = 0x2
  0x2b77: BUF_LOAD R3, [R7 + [0x2b8c]], [0x2bde] // mem[0x2b8c] = 0x2, mem[0x2bde] = 0x2
  0x2c27: MOV R1, R5
  0x2c33: ADD R1, R12
  0x2c3c: MOV R4, [R1]
  0x2c54: ZERO R0
  0x2c57: ZERO R1
  0x2c5a: MemSub [0x4] -= [0x3] // 
block_0x2c5d:
  0x2c5d: BOUNDS_CHECK R4 R0
block_0x2c72:
  0x2c72: ADD R1, R5
  0x2c7b: ADD R1, R12
  0x2c84: MOV [R1], R4
  0x2cb4: BUF_LOAD R3, [R7 + [0x2cc9]], [0x2d1b] // mem[0x2cc9] = 0x2, mem[0x2d1b] = 0x5
  0x2d64: MOV R1, R5
  0x2d70: ADD R1, R12
  0x2d79: MOV R4, [R1]
  0x2d91: ADD R4, R3
  0x2d9d: BOUNDS_CHECK R4 R0
block_0x2db5:
  0x2db5: ADD R1, R5
  0x2dbe: ADD R1, R12
  0x2dc7: MOV [R1], R4
  0x2df7: BUF_LOAD R3, [R7 + [0x2e0c]], [0x2e5e] // mem[0x2e0c] = 0x2, mem[0x2e5e] = 0x7
  0x2ea7: MOV R1, R5
  0x2eb3: ADD R1, R12
  0x2ebc: MOV R4, [R1]
  0x2ed4: ADD R4, R3
  0x2ee0: BOUNDS_CHECK R4 R0
block_0x2ef8:
  0x2ef8: ADD R4, R3
  0x2f01: BOUNDS_CHECK R4 R0
block_0x2f19:
  0x2f19: ADD R4, R3
  0x2f22: BOUNDS_CHECK R4 R0
block_0x2f3a:
  0x2f3a: ADD R1, R5
  0x2f43: ADD R1, R12
  0x2f4c: MOV [R1], R4
  0x2f7c: BUF_STORE [0x3008], [R7 + [0x2f91]], [0x2fe3] // mem[0x2f91] = 0x1, mem[0x2fe3] = 0x3
  0x3054: BUF_LOAD R3, [R7 + [0x3069]], [0x30bb] // mem[0x3069] = 0x2, mem[0x30bb] = 0x0
  0x3104: MOV R1, R5
  0x3110: ADD R1, R12
  0x3119: MOV R4, [R1]
  0x3131: ADD R4, R3
  0x313d: BOUNDS_CHECK R4 R0
block_0x3155:
  0x3155: ADD R4, R3
  0x315e: BOUNDS_CHECK R4 R0
block_0x3176:
  0x3176: ADD R1, R5
  0x317f: ADD R1, R12
  0x3188: MOV [R1], R4
  0x31b8: BUF_LOAD R3, [R7 + [0x31cd]], [0x321f] // mem[0x31cd] = 0x2, mem[0x321f] = 0x1
  0x3268: MOV R1, R5
  0x3274: ADD R1, R12
  0x327d: MOV R4, [R1]
  0x3295: ADD R4, R3
  0x32a1: BOUNDS_CHECK R4 R0
block_0x32b9:
  0x32b9: ADD R1, R5
  0x32c2: ADD R1, R12
  0x32cb: MOV [R1], R4
  0x32fb: BUF_LOAD R3, [R7 + [0x3310]], [0x3362] // mem[0x3310] = 0x2, mem[0x3362] = 0x2
  0x33ab: MOV R1, R5
  0x33b7: ADD R1, R12
  0x33c0: MOV R4, [R1]
  0x33d8: ZERO R0
  0x33db: ZERO R1
  0x33de: MemSub [0x4] -= [0x3] // 
block_0x33e1:
  0x33e1: BOUNDS_CHECK R4 R0
block_0x33f6:
  0x33f6: ADD R1, R5
  0x33ff: ADD R1, R12
  0x3408: MOV [R1], R4
  0x3438: BUF_LOAD R3, [R7 + [0x344d]], [0x349f] // mem[0x344d] = 0x2, mem[0x349f] = 0x3
  0x34e8: MOV R1, R5
  0x34f4: ADD R1, R12
  0x34fd: MOV R4, [R1]
  0x3515: ADD R4, R3
  0x3521: BOUNDS_CHECK R4 R0
block_0x3539:
  0x3539: ADD R4, R3
  0x3542: BOUNDS_CHECK R4 R0
block_0x355a:
  0x355a: ADD R4, R3
  0x3563: BOUNDS_CHECK R4 R0
block_0x357b:
  0x357b: ADD R1, R5
  0x3584: ADD R1, R12
  0x358d: MOV [R1], R4
  0x35bd: BUF_LOAD R3, [R7 + [0x35d2]], [0x3624] // mem[0x35d2] = 0x2, mem[0x3624] = 0x5
  0x366d: MOV R1, R5
  0x3679: ADD R1, R12
  0x3682: MOV R4, [R1]
  0x369a: ADD R4, R3
  0x36a6: BOUNDS_CHECK R4 R0
block_0x36be:
  0x36be: ADD R4, R3
  0x36c7: BOUNDS_CHECK R4 R0
block_0x36df:
  0x36df: ADD R4, R3
  0x36e8: BOUNDS_CHECK R4 R0
block_0x3700:
  0x3700: ADD R1, R5
  0x3709: ADD R1, R12
  0x3712: MOV [R1], R4
  0x3742: BUF_LOAD R3, [R7 + [0x3757]], [0x37a9] // mem[0x3757] = 0x2, mem[0x37a9] = 0x6
  0x37f2: MOV R1, R5
  0x37fe: ADD R1, R12
  0x3807: MOV R4, [R1]
  0x381f: ADD R4, R3
  0x382b: BOUNDS_CHECK R4 R0
block_0x3843:
  0x3843: ADD R4, R3
  0x384c: BOUNDS_CHECK R4 R0
block_0x3864:
  0x3864: ADD R4, R3
  0x386d: BOUNDS_CHECK R4 R0
block_0x3885:
  0x3885: ADD R1, R5
  0x388e: ADD R1, R12
  0x3897: MOV [R1], R4
  0x38c7: BUF_LOAD R3, [R7 + [0x38dc]], [0x392e] // mem[0x38dc] = 0x2, mem[0x392e] = 0x7
  0x3977: MOV R1, R5
  0x3983: ADD R1, R12
  0x398c: MOV R4, [R1]
  0x39a4: ADD R4, R3
  0x39b0: BOUNDS_CHECK R4 R0
block_0x39c8:
  0x39c8: ADD R4, R3
  0x39d1: BOUNDS_CHECK R4 R0
block_0x39e9:
  0x39e9: ADD R4, R3
  0x39f2: BOUNDS_CHECK R4 R0
block_0x3a0a:
  0x3a0a: ADD R1, R5
  0x3a13: ADD R1, R12
  0x3a1c: MOV [R1], R4
  0x3a4c: BUF_STORE [0x3ad8], [R7 + [0x3a61]], [0x3ab3] // mem[0x3a61] = 0x1, mem[0x3ab3] = 0x4
  0x3b24: BUF_LOAD R3, [R7 + [0x3b39]], [0x3b8b] // mem[0x3b39] = 0x2, mem[0x3b8b] = 0x0
  0x3bd4: MOV R1, R5
  0x3be0: ADD R1, R12
  0x3be9: MOV R4, [R1]
  0x3c01: ZERO R0
  0x3c04: ZERO R1
  0x3c07: MemSub [0x4] -= [0x3] // 
block_0x3c0a:
  0x3c0a: BOUNDS_CHECK R4 R0
block_0x3c1f:
  0x3c1f: ADD R1, R5
  0x3c28: ADD R1, R12
  0x3c31: MOV [R1], R4
  0x3c61: BUF_LOAD R3, [R7 + [0x3c76]], [0x3cc8] // mem[0x3c76] = 0x2, mem[0x3cc8] = 0x1
  0x3d11: MOV R1, R5
  0x3d1d: ADD R1, R12
  0x3d26: MOV R4, [R1]
  0x3d3e: ADD R4, R3
  0x3d4a: BOUNDS_CHECK R4 R0
block_0x3d62:
  0x3d62: ADD R1, R5
  0x3d6b: ADD R1, R12
  0x3d74: MOV [R1], R4
  0x3da4: BUF_LOAD R3, [R7 + [0x3db9]], [0x3e0b] // mem[0x3db9] = 0x2, mem[0x3e0b] = 0x2
  0x3e54: MOV R1, R5
  0x3e60: ADD R1, R12
  0x3e69: MOV R4, [R1]
  0x3e81: ADD R4, R3
  0x3e8d: BOUNDS_CHECK R4 R0
block_0x3ea5:
  0x3ea5: ADD R4, R3
  0x3eae: BOUNDS_CHECK R4 R0
block_0x3ec6:
  0x3ec6: ADD R1, R5
  0x3ecf: ADD R1, R12
  0x3ed8: MOV [R1], R4
  0x3f08: BUF_LOAD R3, [R7 + [0x3f1d]], [0x3f6f] // mem[0x3f1d] = 0x2, mem[0x3f6f] = 0x3
  0x3fb8: MOV R1, R5
  0x3fc4: ADD R1, R12
  0x3fcd: MOV R4, [R1]
  0x3fe5: ADD R4, R3
  0x3ff1: BOUNDS_CHECK R4 R0
block_0x4009:
  0x4009: ADD R4, R3
  0x4012: BOUNDS_CHECK R4 R0
block_0x402a:
  0x402a: ADD R1, R5
  0x4033: ADD R1, R12
  0x403c: MOV [R1], R4
  0x406c: BUF_LOAD R3, [R7 + [0x4081]], [0x40d3] // mem[0x4081] = 0x2, mem[0x40d3] = 0x4
  0x411c: MOV R1, R5
  0x4128: ADD R1, R12
  0x4131: MOV R4, [R1]
  0x4149: ADD R4, R3
  0x4155: BOUNDS_CHECK R4 R0
block_0x416d:
  0x416d: ADD R1, R5
  0x4176: ADD R1, R12
  0x417f: MOV [R1], R4
  0x41af: BUF_LOAD R3, [R7 + [0x41c4]], [0x4216] // mem[0x41c4] = 0x2, mem[0x4216] = 0x5
  0x425f: MOV R1, R5
  0x426b: ADD R1, R12
  0x4274: MOV R4, [R1]
  0x428c: ZERO R0
  0x428f: ZERO R1
  0x4292: MemSub [0x4] -= [0x3] // 
block_0x4295:
  0x4295: BOUNDS_CHECK R4 R0
block_0x42aa:
  0x42aa: ZERO R0
  0x42ad: MemSub [0x4] -= [0x3] // 
block_0x42b0:
  0x42b0: BOUNDS_CHECK R4 R0
block_0x42c5:
  0x42c5: ZERO R0
  0x42c8: MemSub [0x4] -= [0x3] // 
block_0x42cb:
  0x42cb: BOUNDS_CHECK R4 R0
block_0x42e0:
  0x42e0: ADD R1, R5
  0x42e9: ADD R1, R12
  0x42f2: MOV [R1], R4
  0x4322: BUF_LOAD R3, [R7 + [0x4337]], [0x4389] // mem[0x4337] = 0x2, mem[0x4389] = 0x6
  0x43d2: MOV R1, R5
  0x43de: ADD R1, R12
  0x43e7: MOV R4, [R1]
  0x43ff: ADD R4, R3
  0x440b: BOUNDS_CHECK R4 R0
block_0x4423:
  0x4423: ADD R4, R3
  0x442c: BOUNDS_CHECK R4 R0
block_0x4444:
  0x4444: ADD R1, R5
  0x444d: ADD R1, R12
  0x4456: MOV [R1], R4
  0x4486: BUF_LOAD R3, [R7 + [0x449b]], [0x44ed] // mem[0x449b] = 0x2, mem[0x44ed] = 0x7
  0x4536: MOV R1, R5
  0x4542: ADD R1, R12
  0x454b: MOV R4, [R1]
  0x4563: ZERO R0
  0x4566: ZERO R1
  0x4569: MemSub [0x4] -= [0x3] // 
block_0x456c:
  0x456c: BOUNDS_CHECK R4 R0
block_0x4581:
  0x4581: ZERO R0
  0x4584: MemSub [0x4] -= [0x3] // 
block_0x4587:
  0x4587: BOUNDS_CHECK R4 R0
block_0x459c:
  0x459c: ADD R1, R5
  0x45a5: ADD R1, R12
  0x45ae: MOV [R1], R4
  0x45de: BUF_STORE [0x466a], [R7 + [0x45f3]], [0x4645] // mem[0x45f3] = 0x1, mem[0x4645] = 0x5
  0x46b6: BUF_LOAD R3, [R7 + [0x46cb]], [0x471d] // mem[0x46cb] = 0x2, mem[0x471d] = 0x0
  0x4766: MOV R1, R5
  0x4772: ADD R1, R12
  0x477b: MOV R4, [R1]
  0x4793: ZERO R0
  0x4796: ZERO R1
  0x4799: MemSub [0x4] -= [0x3] // 
block_0x479c:
  0x479c: BOUNDS_CHECK R4 R0
block_0x47b1:
  0x47b1: ADD R1, R5
  0x47ba: ADD R1, R12
  0x47c3: MOV [R1], R4
  0x47f3: BUF_LOAD R3, [R7 + [0x4808]], [0x485a] // mem[0x4808] = 0x2, mem[0x485a] = 0x1
  0x48a3: MOV R1, R5
  0x48af: ADD R1, R12
  0x48b8: MOV R4, [R1]
  0x48d0: ZERO R0
  0x48d3: ZERO R1
  0x48d6: MemSub [0x4] -= [0x3] // 
block_0x48d9:
  0x48d9: BOUNDS_CHECK R4 R0
block_0x48ee:
  0x48ee: ADD R1, R5
  0x48f7: ADD R1, R12
  0x4900: MOV [R1], R4
  0x4930: BUF_LOAD R3, [R7 + [0x4945]], [0x4997] // mem[0x4945] = 0x2, mem[0x4997] = 0x2
  0x49e0: MOV R1, R5
  0x49ec: ADD R1, R12
  0x49f5: MOV R4, [R1]
  0x4a0d: ADD R4, R3
  0x4a19: BOUNDS_CHECK R4 R0
block_0x4a31:
  0x4a31: ADD R1, R5
  0x4a3a: ADD R1, R12
  0x4a43: MOV [R1], R4
  0x4a73: BUF_LOAD R3, [R7 + [0x4a88]], [0x4ada] // mem[0x4a88] = 0x2, mem[0x4ada] = 0x3
  0x4b23: MOV R1, R5
  0x4b2f: ADD R1, R12
  0x4b38: MOV R4, [R1]
  0x4b50: ZERO R0
  0x4b53: ZERO R1
  0x4b56: MemSub [0x4] -= [0x3] // 
block_0x4b59:
  0x4b59: BOUNDS_CHECK R4 R0
block_0x4b6e:
  0x4b6e: ADD R1, R5
  0x4b77: ADD R1, R12
  0x4b80: MOV [R1], R4
  0x4bb0: BUF_LOAD R3, [R7 + [0x4bc5]], [0x4c17] // mem[0x4bc5] = 0x2, mem[0x4c17] = 0x4
  0x4c60: MOV R1, R5
  0x4c6c: ADD R1, R12
  0x4c75: MOV R4, [R1]
  0x4c8d: ZERO R0
  0x4c90: ZERO R1
  0x4c93: MemSub [0x4] -= [0x3] // 
block_0x4c96:
  0x4c96: BOUNDS_CHECK R4 R0
block_0x4cab:
  0x4cab: ADD R1, R5
  0x4cb4: ADD R1, R12
  0x4cbd: MOV [R1], R4
  0x4ced: BUF_LOAD R3, [R7 + [0x4d02]], [0x4d54] // mem[0x4d02] = 0x2, mem[0x4d54] = 0x6
  0x4d9d: MOV R1, R5
  0x4da9: ADD R1, R12
  0x4db2: MOV R4, [R1]
  0x4dca: ZERO R0
  0x4dcd: ZERO R1
  0x4dd0: MemSub [0x4] -= [0x3] // 
block_0x4dd3:
  0x4dd3: BOUNDS_CHECK R4 R0
block_0x4de8:
  0x4de8: ZERO R0
  0x4deb: MemSub [0x4] -= [0x3] // 
block_0x4dee:
  0x4dee: BOUNDS_CHECK R4 R0
block_0x4e03:
  0x4e03: ZERO R0
  0x4e06: MemSub [0x4] -= [0x3] // 
block_0x4e09:
  0x4e09: BOUNDS_CHECK R4 R0
block_0x4e1e:
  0x4e1e: ADD R1, R5
  0x4e27: ADD R1, R12
  0x4e30: MOV [R1], R4
  0x4e60: BUF_LOAD R3, [R7 + [0x4e75]], [0x4ec7] // mem[0x4e75] = 0x2, mem[0x4ec7] = 0x7
  0x4f10: MOV R1, R5
  0x4f1c: ADD R1, R12
  0x4f25: MOV R4, [R1]
  0x4f3d: ZERO R0
  0x4f40: ZERO R1
  0x4f43: MemSub [0x4] -= [0x3] // 
block_0x4f46:
  0x4f46: BOUNDS_CHECK R4 R0
block_0x4f5b:
  0x4f5b: ZERO R0
  0x4f5e: MemSub [0x4] -= [0x3] // 
block_0x4f61:
  0x4f61: BOUNDS_CHECK R4 R0
block_0x4f76:
  0x4f76: ADD R1, R5
  0x4f7f: ADD R1, R12
  0x4f88: MOV [R1], R4
  0x4fb8: BUF_STORE [0x5044], [R7 + [0x4fcd]], [0x501f] // mem[0x4fcd] = 0x1, mem[0x501f] = 0x6
  0x5090: BUF_LOAD R3, [R7 + [0x50a5]], [0x50f7] // mem[0x50a5] = 0x2, mem[0x50f7] = 0x0
  0x5140: MOV R1, R5
  0x514c: ADD R1, R12
  0x5155: MOV R4, [R1]
  0x516d: ADD R4, R3
  0x5179: BOUNDS_CHECK R4 R0
block_0x5191:
  0x5191: ADD R1, R5
  0x519a: ADD R1, R12
  0x51a3: MOV [R1], R4
  0x51d3: BUF_LOAD R3, [R7 + [0x51e8]], [0x523a] // mem[0x51e8] = 0x2, mem[0x523a] = 0x1
  0x5283: MOV R1, R5
  0x528f: ADD R1, R12
  0x5298: MOV R4, [R1]
  0x52b0: ZERO R0
  0x52b3: ZERO R1
  0x52b6: MemSub [0x4] -= [0x3] // 
block_0x52b9:
  0x52b9: BOUNDS_CHECK R4 R0
block_0x52ce:
  0x52ce: ADD R1, R5
  0x52d7: ADD R1, R12
  0x52e0: MOV [R1], R4
  0x5310: BUF_LOAD R3, [R7 + [0x5325]], [0x5377] // mem[0x5325] = 0x2, mem[0x5377] = 0x2
  0x53c0: MOV R1, R5
  0x53cc: ADD R1, R12
  0x53d5: MOV R4, [R1]
  0x53ed: ZERO R0
  0x53f0: ZERO R1
  0x53f3: MemSub [0x4] -= [0x3] // 
block_0x53f6:
  0x53f6: BOUNDS_CHECK R4 R0
block_0x540b:
  0x540b: ADD R1, R5
  0x5414: ADD R1, R12
  0x541d: MOV [R1], R4
  0x544d: BUF_LOAD R3, [R7 + [0x5462]], [0x54b4] // mem[0x5462] = 0x2, mem[0x54b4] = 0x4
  0x54fd: MOV R1, R5
  0x5509: ADD R1, R12
  0x5512: MOV R4, [R1]
  0x552a: ZERO R0
  0x552d: ZERO R1
  0x5530: MemSub [0x4] -= [0x3] // 
block_0x5533:
  0x5533: BOUNDS_CHECK R4 R0
block_0x5548:
  0x5548: ADD R1, R5
  0x5551: ADD R1, R12
  0x555a: MOV [R1], R4
  0x558a: BUF_LOAD R3, [R7 + [0x559f]], [0x55f1] // mem[0x559f] = 0x2, mem[0x55f1] = 0x5
  0x563a: MOV R1, R5
  0x5646: ADD R1, R12
  0x564f: MOV R4, [R1]
  0x5667: ADD R4, R3
  0x5673: BOUNDS_CHECK R4 R0
block_0x568b:
  0x568b: ADD R4, R3
  0x5694: BOUNDS_CHECK R4 R0
block_0x56ac:
  0x56ac: ADD R4, R3
  0x56b5: BOUNDS_CHECK R4 R0
block_0x56cd:
  0x56cd: ADD R1, R5
  0x56d6: ADD R1, R12
  0x56df: MOV [R1], R4
  0x570f: BUF_LOAD R3, [R7 + [0x5724]], [0x5776] // mem[0x5724] = 0x2, mem[0x5776] = 0x6
  0x57bf: MOV R1, R5
  0x57cb: ADD R1, R12
  0x57d4: MOV R4, [R1]
  0x57ec: ZERO R0
  0x57ef: ZERO R1
  0x57f2: MemSub [0x4] -= [0x3] // 
block_0x57f5:
  0x57f5: BOUNDS_CHECK R4 R0
block_0x580a:
  0x580a: ZERO R0
  0x580d: MemSub [0x4] -= [0x3] // 
block_0x5810:
  0x5810: BOUNDS_CHECK R4 R0
block_0x5825:
  0x5825: ADD R1, R5
  0x582e: ADD R1, R12
  0x5837: MOV [R1], R4
  0x5867: BUF_LOAD R3, [R7 + [0x587c]], [0x58ce] // mem[0x587c] = 0x2, mem[0x58ce] = 0x7
  0x5917: MOV R1, R5
  0x5923: ADD R1, R12
  0x592c: MOV R4, [R1]
  0x5944: ADD R4, R3
  0x5950: BOUNDS_CHECK R4 R0
block_0x5968:
  0x5968: ADD R4, R3
  0x5971: BOUNDS_CHECK R4 R0
block_0x5989:
  0x5989: ADD R4, R3
  0x5992: BOUNDS_CHECK R4 R0
block_0x59aa:
  0x59aa: ADD R1, R5
  0x59b3: ADD R1, R12
  0x59bc: MOV [R1], R4
  0x59ec: BUF_STORE [0x5a78], [R7 + [0x5a01]], [0x5a53] // mem[0x5a01] = 0x1, mem[0x5a53] = 0x7
  0x5ac4: BUF_LOAD R3, [R7 + [0x5ad9]], [0x5b2b] // mem[0x5ad9] = 0x2, mem[0x5b2b] = 0x0
  0x5b74: MOV R1, R5
  0x5b80: ADD R1, R12
  0x5b89: MOV R4, [R1]
  0x5ba1: ZERO R0
  0x5ba4: ZERO R1
  0x5ba7: MemSub [0x4] -= [0x3] // 
block_0x5baa:
  0x5baa: BOUNDS_CHECK R4 R0
block_0x5bbf:
  0x5bbf: ADD R1, R5
  0x5bc8: ADD R1, R12
  0x5bd1: MOV [R1], R4
  0x5c01: BUF_LOAD R3, [R7 + [0x5c16]], [0x5c68] // mem[0x5c16] = 0x2, mem[0x5c68] = 0x3
  0x5cb1: MOV R1, R5
  0x5cbd: ADD R1, R12
  0x5cc6: MOV R4, [R1]
  0x5cde: ADD R4, R3
  0x5cea: BOUNDS_CHECK R4 R0
block_0x5d02:
  0x5d02: ADD R1, R5
  0x5d0b: ADD R1, R12
  0x5d14: MOV [R1], R4
  0x5d44: BUF_LOAD R3, [R7 + [0x5d59]], [0x5dab] // mem[0x5d59] = 0x2, mem[0x5dab] = 0x4
  0x5df4: MOV R1, R5
  0x5e00: ADD R1, R12
  0x5e09: MOV R4, [R1]
  0x5e21: ADD R4, R3
  0x5e2d: BOUNDS_CHECK R4 R0
block_0x5e45:
  0x5e45: ADD R4, R3
  0x5e4e: BOUNDS_CHECK R4 R0
block_0x5e66:
  0x5e66: ADD R1, R5
  0x5e6f: ADD R1, R12
  0x5e78: MOV [R1], R4
  0x5ea8: BUF_LOAD R3, [R7 + [0x5ebd]], [0x5f0f] // mem[0x5ebd] = 0x2, mem[0x5f0f] = 0x5
  0x5f58: MOV R1, R5
  0x5f64: ADD R1, R12
  0x5f6d: MOV R4, [R1]
  0x5f85: ZERO R0
  0x5f88: ZERO R1
  0x5f8b: MemSub [0x4] -= [0x3] // 
block_0x5f8e:
  0x5f8e: BOUNDS_CHECK R4 R0
block_0x5fa3:
  0x5fa3: ZERO R0
  0x5fa6: MemSub [0x4] -= [0x3] // 
block_0x5fa9:
  0x5fa9: BOUNDS_CHECK R4 R0
block_0x5fbe:
  0x5fbe: ZERO R0
  0x5fc1: MemSub [0x4] -= [0x3] // 
block_0x5fc4:
  0x5fc4: BOUNDS_CHECK R4 R0
block_0x5fd9:
  0x5fd9: ADD R1, R5
  0x5fe2: ADD R1, R12
  0x5feb: MOV [R1], R4
  0x601b: BUF_LOAD R3, [R7 + [0x6030]], [0x6082] // mem[0x6030] = 0x2, mem[0x6082] = 0x6
  0x60cb: MOV R1, R5
  0x60d7: ADD R1, R12
  0x60e0: MOV R4, [R1]
  0x60f8: ADD R4, R3
  0x6104: BOUNDS_CHECK R4 R0
block_0x611c:
  0x611c: ADD R4, R3
  0x6125: BOUNDS_CHECK R4 R0
block_0x613d:
  0x613d: ADD R1, R5
  0x6146: ADD R1, R12
  0x614f: MOV [R1], R4
  0x617f: BUF_LOAD R3, [R7 + [0x6194]], [0x61e6] // mem[0x6194] = 0x2, mem[0x61e6] = 0x7
  0x622f: MOV R1, R5
  0x623b: ADD R1, R12
  0x6244: MOV R4, [R1]
  0x625c: ADD R4, R3
  0x6268: BOUNDS_CHECK R4 R0
block_0x6280:
  0x6280: ADD R1, R5
  0x6289: ADD R1, R12
  0x6292: MOV [R1], R4
  0x62c2: MOV R8, R7
  0x62d1: POP R7 (shift=[0x6304]) // val = 0x0, offs = 0x1
block_0x6323:
  0x6323: POP R5 (shift=[0x6356]) // val = 0x0, offs = 0x1
block_0x6375:
  0x6375: POP R4 (shift=[0x63a8]) // val = 0x0, offs = 0x1
block_0x63c7:
  0x63c7: POP R3 (shift=[0x63fa]) // val = 0x0, offs = 0x1
block_0x6419:
  0x6419: MOV R9, R3
  0x6428: ADD R1, R3
  0x6431: ADD R1, R13
  0x643a: JMP [R1]

func_0x6458:
  0x6458: MOV R3, R8
  0x6461: ZERO R0
  0x6464: PUSH R4 (shift=[0x6467]) // val = 0x0, offs = 0x1
  0x64ce: ZERO R0
  0x64d1: ZERO R1
  0x64d4: PUSH R5 (shift=[0x64d7]) // val = 0x0, offs = 0x1
  0x653e: ZERO R0
  0x6541: ZERO R1
  0x6544: PUSH R7 (shift=[0x6547]) // val = 0x0, offs = 0x1
  0x65ae: MOV R7, R8
  0x65bd: ZERO R0
  0x65c0: MemSub [0x8] -= [0x65c3] //  // mem[0x65c3] = 0x0
block_0x65c7:
  0x65c7: BOUNDS_CHECK R8 R0
block_0x65dc:
  0x65dc: BUF_STORE [0x6665], [R7 + [0x65ee]], [0x6640] // mem[0x65ee] = 0x1, mem[0x6640] = 0x0
  0x66b1: BUF_LOAD R3, [R7 + [0x66c6]], [0x6718] // mem[0x66c6] = 0x2, mem[0x6718] = 0x0
  0x6761: MOV R1, R5
  0x676d: ADD R1, R12
  0x6776: MOV R4, [R1]
  0x678e: ZERO R0
  0x6791: ZERO R1
  0x6794: MemSub [0x4] -= [0x3] // 
block_0x6797:
  0x6797: BOUNDS_CHECK R4 R0
block_0x67ac:
  0x67ac: ADD R1, R5
  0x67b5: ADD R1, R12
  0x67be: MOV [R1], R4
  0x67ee: BUF_LOAD R3, [R7 + [0x6803]], [0x6855] // mem[0x6803] = 0x2, mem[0x6855] = 0x3
  0x689e: MOV R1, R5
  0x68aa: ADD R1, R12
  0x68b3: MOV R4, [R1]
  0x68cb: ZERO R0
  0x68ce: ZERO R1
  0x68d1: MemSub [0x4] -= [0x3] // 
block_0x68d4:
  0x68d4: BOUNDS_CHECK R4 R0
block_0x68e9:
  0x68e9: ZERO R0
  0x68ec: MemSub [0x4] -= [0x3] // 
block_0x68ef:
  0x68ef: BOUNDS_CHECK R4 R0
block_0x6904:
  0x6904: ADD R1, R5
  0x690d: ADD R1, R12
  0x6916: MOV [R1], R4
  0x6946: BUF_LOAD R3, [R7 + [0x695b]], [0x69ad] // mem[0x695b] = 0x2, mem[0x69ad] = 0x5
  0x69f6: MOV R1, R5
  0x6a02: ADD R1, R12
  0x6a0b: MOV R4, [R1]
  0x6a23: ADD R4, R3
  0x6a2f: BOUNDS_CHECK R4 R0
block_0x6a47:
  0x6a47: ADD R1, R5
  0x6a50: ADD R1, R12
  0x6a59: MOV [R1], R4
  0x6a89: BUF_LOAD R3, [R7 + [0x6a9e]], [0x6af0] // mem[0x6a9e] = 0x2, mem[0x6af0] = 0x6
  0x6b39: MOV R1, R5
  0x6b45: ADD R1, R12
  0x6b4e: MOV R4, [R1]
  0x6b66: ZERO R0
  0x6b69: ZERO R1
  0x6b6c: MemSub [0x4] -= [0x3] // 
block_0x6b6f:
  0x6b6f: BOUNDS_CHECK R4 R0
block_0x6b84:
  0x6b84: ADD R1, R5
  0x6b8d: ADD R1, R12
  0x6b96: MOV [R1], R4
  0x6bc6: BUF_LOAD R3, [R7 + [0x6bdb]], [0x6c2d] // mem[0x6bdb] = 0x2, mem[0x6c2d] = 0x7
  0x6c76: MOV R1, R5
  0x6c82: ADD R1, R12
  0x6c8b: MOV R4, [R1]
  0x6ca3: ADD R4, R3
  0x6caf: BOUNDS_CHECK R4 R0
block_0x6cc7:
  0x6cc7: ADD R4, R3
  0x6cd0: BOUNDS_CHECK R4 R0
block_0x6ce8:
  0x6ce8: ADD R1, R5
  0x6cf1: ADD R1, R12
  0x6cfa: MOV [R1], R4
  0x6d2a: BUF_STORE [0x6db6], [R7 + [0x6d3f]], [0x6d91] // mem[0x6d3f] = 0x1, mem[0x6d91] = 0x1
  0x6e02: BUF_LOAD R3, [R7 + [0x6e17]], [0x6e69] // mem[0x6e17] = 0x2, mem[0x6e69] = 0x0
  0x6eb2: MOV R1, R5
  0x6ebe: ADD R1, R12
  0x6ec7: MOV R4, [R1]
  0x6edf: ZERO R0
  0x6ee2: ZERO R1
  0x6ee5: MemSub [0x4] -= [0x3] // 
block_0x6ee8:
  0x6ee8: BOUNDS_CHECK R4 R0
block_0x6efd:
  0x6efd: ZERO R0
  0x6f00: MemSub [0x4] -= [0x3] // 
block_0x6f03:
  0x6f03: BOUNDS_CHECK R4 R0
block_0x6f18:
  0x6f18: ADD R1, R5
  0x6f21: ADD R1, R12
  0x6f2a: MOV [R1], R4
  0x6f5a: BUF_LOAD R3, [R7 + [0x6f6f]], [0x6fc1] // mem[0x6f6f] = 0x2, mem[0x6fc1] = 0x1
  0x700a: MOV R1, R5
  0x7016: ADD R1, R12
  0x701f: MOV R4, [R1]
  0x7037: ZERO R0
  0x703a: ZERO R1
  0x703d: MemSub [0x4] -= [0x3] // 
block_0x7040:
  0x7040: BOUNDS_CHECK R4 R0
block_0x7055:
  0x7055: ADD R1, R5
  0x705e: ADD R1, R12
  0x7067: MOV [R1], R4
  0x7097: BUF_LOAD R3, [R7 + [0x70ac]], [0x70fe] // mem[0x70ac] = 0x2, mem[0x70fe] = 0x3
  0x7147: MOV R1, R5
  0x7153: ADD R1, R12
  0x715c: MOV R4, [R1]
  0x7174: ZERO R0
  0x7177: ZERO R1
  0x717a: MemSub [0x4] -= [0x3] // 
block_0x717d:
  0x717d: BOUNDS_CHECK R4 R0
block_0x7192:
  0x7192: ADD R1, R5
  0x719b: ADD R1, R12
  0x71a4: MOV [R1], R4
  0x71d4: BUF_LOAD R3, [R7 + [0x71e9]], [0x723b] // mem[0x71e9] = 0x2, mem[0x723b] = 0x4
  0x7284: MOV R1, R5
  0x7290: ADD R1, R12
  0x7299: MOV R4, [R1]
  0x72b1: ADD R4, R3
  0x72bd: BOUNDS_CHECK R4 R0
block_0x72d5:
  0x72d5: ADD R1, R5
  0x72de: ADD R1, R12
  0x72e7: MOV [R1], R4
  0x7317: BUF_LOAD R3, [R7 + [0x732c]], [0x737e] // mem[0x732c] = 0x2, mem[0x737e] = 0x5
  0x73c7: MOV R1, R5
  0x73d3: ADD R1, R12
  0x73dc: MOV R4, [R1]
  0x73f4: ZERO R0
  0x73f7: ZERO R1
  0x73fa: MemSub [0x4] -= [0x3] // 
block_0x73fd:
  0x73fd: BOUNDS_CHECK R4 R0
block_0x7412:
  0x7412: ADD R1, R5
  0x741b: ADD R1, R12
  0x7424: MOV [R1], R4
  0x7454: BUF_LOAD R3, [R7 + [0x7469]], [0x74bb] // mem[0x7469] = 0x2, mem[0x74bb] = 0x6
  0x7504: MOV R1, R5
  0x7510: ADD R1, R12
  0x7519: MOV R4, [R1]
  0x7531: ZERO R0
  0x7534: ZERO R1
  0x7537: MemSub [0x4] -= [0x3] // 
block_0x753a:
  0x753a: BOUNDS_CHECK R4 R0
block_0x754f:
  0x754f: ADD R1, R5
  0x7558: ADD R1, R12
  0x7561: MOV [R1], R4
  0x7591: BUF_LOAD R3, [R7 + [0x75a6]], [0x75f8] // mem[0x75a6] = 0x2, mem[0x75f8] = 0x7
  0x7641: MOV R1, R5
  0x764d: ADD R1, R12
  0x7656: MOV R4, [R1]
  0x766e: ADD R4, R3
  0x767a: BOUNDS_CHECK R4 R0
block_0x7692:
  0x7692: ADD R1, R5
  0x769b: ADD R1, R12
  0x76a4: MOV [R1], R4
  0x76d4: BUF_STORE [0x7760], [R7 + [0x76e9]], [0x773b] // mem[0x76e9] = 0x1, mem[0x773b] = 0x2
  0x77ac: BUF_LOAD R3, [R7 + [0x77c1]], [0x7813] // mem[0x77c1] = 0x2, mem[0x7813] = 0x0
  0x785c: MOV R1, R5
  0x7868: ADD R1, R12
  0x7871: MOV R4, [R1]
  0x7889: ZERO R0
  0x788c: ZERO R1
  0x788f: MemSub [0x4] -= [0x3] // 
block_0x7892:
  0x7892: BOUNDS_CHECK R4 R0
block_0x78a7:
  0x78a7: ADD R1, R5
  0x78b0: ADD R1, R12
  0x78b9: MOV [R1], R4
  0x78e9: BUF_LOAD R3, [R7 + [0x78fe]], [0x7950] // mem[0x78fe] = 0x2, mem[0x7950] = 0x2
  0x7999: MOV R1, R5
  0x79a5: ADD R1, R12
  0x79ae: MOV R4, [R1]
  0x79c6: ZERO R0
  0x79c9: ZERO R1
  0x79cc: MemSub [0x4] -= [0x3] // 
block_0x79cf:
  0x79cf: BOUNDS_CHECK R4 R0
block_0x79e4:
  0x79e4: ADD R1, R5
  0x79ed: ADD R1, R12
  0x79f6: MOV [R1], R4
  0x7a26: BUF_LOAD R3, [R7 + [0x7a3b]], [0x7a8d] // mem[0x7a3b] = 0x2, mem[0x7a8d] = 0x3
  0x7ad6: MOV R1, R5
  0x7ae2: ADD R1, R12
  0x7aeb: MOV R4, [R1]
  0x7b03: ZERO R0
  0x7b06: ZERO R1
  0x7b09: MemSub [0x4] -= [0x3] // 
block_0x7b0c:
  0x7b0c: BOUNDS_CHECK R4 R0
block_0x7b21:
  0x7b21: ZERO R0
  0x7b24: MemSub [0x4] -= [0x3] // 
block_0x7b27:
  0x7b27: BOUNDS_CHECK R4 R0
block_0x7b3c:
  0x7b3c: ADD R1, R5
  0x7b45: ADD R1, R12
  0x7b4e: MOV [R1], R4
  0x7b7e: BUF_LOAD R3, [R7 + [0x7b93]], [0x7be5] // mem[0x7b93] = 0x2, mem[0x7be5] = 0x4
  0x7c2e: MOV R1, R5
  0x7c3a: ADD R1, R12
  0x7c43: MOV R4, [R1]
  0x7c5b: ZERO R0
  0x7c5e: ZERO R1
  0x7c61: MemSub [0x4] -= [0x3] // 
block_0x7c64:
  0x7c64: BOUNDS_CHECK R4 R0
block_0x7c79:
  0x7c79: ADD R1, R5
  0x7c82: ADD R1, R12
  0x7c8b: MOV [R1], R4
  0x7cbb: BUF_LOAD R3, [R7 + [0x7cd0]], [0x7d22] // mem[0x7cd0] = 0x2, mem[0x7d22] = 0x5
  0x7d6b: MOV R1, R5
  0x7d77: ADD R1, R12
  0x7d80: MOV R4, [R1]
  0x7d98: ZERO R0
  0x7d9b: ZERO R1
  0x7d9e: MemSub [0x4] -= [0x3] // 
block_0x7da1:
  0x7da1: BOUNDS_CHECK R4 R0
block_0x7db6:
  0x7db6: ADD R1, R5
  0x7dbf: ADD R1, R12
  0x7dc8: MOV [R1], R4
  0x7df8: BUF_LOAD R3, [R7 + [0x7e0d]], [0x7e5f] // mem[0x7e0d] = 0x2, mem[0x7e5f] = 0x6
  0x7ea8: MOV R1, R5
  0x7eb4: ADD R1, R12
  0x7ebd: MOV R4, [R1]
  0x7ed5: ADD R4, R3
  0x7ee1: BOUNDS_CHECK R4 R0
block_0x7ef9:
  0x7ef9: ADD R4, R3
  0x7f02: BOUNDS_CHECK R4 R0
block_0x7f1a:
  0x7f1a: ADD R1, R5
  0x7f23: ADD R1, R12
  0x7f2c: MOV [R1], R4
  0x7f5c: BUF_LOAD R3, [R7 + [0x7f71]], [0x7fc3] // mem[0x7f71] = 0x2, mem[0x7fc3] = 0x7
  0x800c: MOV R1, R5
  0x8018: ADD R1, R12
  0x8021: MOV R4, [R1]
  0x8039: ADD R4, R3
  0x8045: BOUNDS_CHECK R4 R0
block_0x805d:
  0x805d: ADD R4, R3
  0x8066: BOUNDS_CHECK R4 R0
block_0x807e:
  0x807e: ADD R4, R3
  0x8087: BOUNDS_CHECK R4 R0
block_0x809f:
  0x809f: ADD R1, R5
  0x80a8: ADD R1, R12
  0x80b1: MOV [R1], R4
  0x80e1: BUF_STORE [0x816d], [R7 + [0x80f6]], [0x8148] // mem[0x80f6] = 0x1, mem[0x8148] = 0x3
  0x81b9: BUF_LOAD R3, [R7 + [0x81ce]], [0x8220] // mem[0x81ce] = 0x2, mem[0x8220] = 0x0
  0x8269: MOV R1, R5
  0x8275: ADD R1, R12
  0x827e: MOV R4, [R1]
  0x8296: ADD R4, R3
  0x82a2: BOUNDS_CHECK R4 R0
block_0x82ba:
  0x82ba: ADD R4, R3
  0x82c3: BOUNDS_CHECK R4 R0
block_0x82db:
  0x82db: ADD R1, R5
  0x82e4: ADD R1, R12
  0x82ed: MOV [R1], R4
  0x831d: BUF_LOAD R3, [R7 + [0x8332]], [0x8384] // mem[0x8332] = 0x2, mem[0x8384] = 0x3
  0x83cd: MOV R1, R5
  0x83d9: ADD R1, R12
  0x83e2: MOV R4, [R1]
  0x83fa: ADD R4, R3
  0x8406: BOUNDS_CHECK R4 R0
block_0x841e:
  0x841e: ADD R4, R3
  0x8427: BOUNDS_CHECK R4 R0
block_0x843f:
  0x843f: ADD R4, R3
  0x8448: BOUNDS_CHECK R4 R0
block_0x8460:
  0x8460: ADD R1, R5
  0x8469: ADD R1, R12
  0x8472: MOV [R1], R4
  0x84a2: BUF_LOAD R3, [R7 + [0x84b7]], [0x8509] // mem[0x84b7] = 0x2, mem[0x8509] = 0x5
  0x8552: MOV R1, R5
  0x855e: ADD R1, R12
  0x8567: MOV R4, [R1]
  0x857f: ZERO R0
  0x8582: ZERO R1
  0x8585: MemSub [0x4] -= [0x3] // 
block_0x8588:
  0x8588: BOUNDS_CHECK R4 R0
block_0x859d:
  0x859d: ADD R1, R5
  0x85a6: ADD R1, R12
  0x85af: MOV [R1], R4
  0x85df: BUF_LOAD R3, [R7 + [0x85f4]], [0x8646] // mem[0x85f4] = 0x2, mem[0x8646] = 0x6
  0x868f: MOV R1, R5
  0x869b: ADD R1, R12
  0x86a4: MOV R4, [R1]
  0x86bc: ADD R4, R3
  0x86c8: BOUNDS_CHECK R4 R0
block_0x86e0:
  0x86e0: ADD R1, R5
  0x86e9: ADD R1, R12
  0x86f2: MOV [R1], R4
  0x8722: BUF_LOAD R3, [R7 + [0x8737]], [0x8789] // mem[0x8737] = 0x2, mem[0x8789] = 0x7
  0x87d2: MOV R1, R5
  0x87de: ADD R1, R12
  0x87e7: MOV R4, [R1]
  0x87ff: ZERO R0
  0x8802: ZERO R1
  0x8805: MemSub [0x4] -= [0x3] // 
block_0x8808:
  0x8808: BOUNDS_CHECK R4 R0
block_0x881d:
  0x881d: ZERO R0
  0x8820: MemSub [0x4] -= [0x3] // 
block_0x8823:
  0x8823: BOUNDS_CHECK R4 R0
block_0x8838:
  0x8838: ZERO R0
  0x883b: MemSub [0x4] -= [0x3] // 
block_0x883e:
  0x883e: BOUNDS_CHECK R4 R0
block_0x8853:
  0x8853: ADD R1, R5
  0x885c: ADD R1, R12
  0x8865: MOV [R1], R4
  0x8895: BUF_STORE [0x8921], [R7 + [0x88aa]], [0x88fc] // mem[0x88aa] = 0x1, mem[0x88fc] = 0x4
  0x896d: BUF_LOAD R3, [R7 + [0x8982]], [0x89d4] // mem[0x8982] = 0x2, mem[0x89d4] = 0x2
  0x8a1d: MOV R1, R5
  0x8a29: ADD R1, R12
  0x8a32: MOV R4, [R1]
  0x8a4a: ADD R4, R3
  0x8a56: BOUNDS_CHECK R4 R0
block_0x8a6e:
  0x8a6e: ADD R1, R5
  0x8a77: ADD R1, R12
  0x8a80: MOV [R1], R4
  0x8ab0: BUF_LOAD R3, [R7 + [0x8ac5]], [0x8b17] // mem[0x8ac5] = 0x2, mem[0x8b17] = 0x5
  0x8b60: MOV R1, R5
  0x8b6c: ADD R1, R12
  0x8b75: MOV R4, [R1]
  0x8b8d: ZERO R0
  0x8b90: ZERO R1
  0x8b93: MemSub [0x4] -= [0x3] // 
block_0x8b96:
  0x8b96: BOUNDS_CHECK R4 R0
block_0x8bab:
  0x8bab: ADD R1, R5
  0x8bb4: ADD R1, R12
  0x8bbd: MOV [R1], R4
  0x8bed: BUF_LOAD R3, [R7 + [0x8c02]], [0x8c54] // mem[0x8c02] = 0x2, mem[0x8c54] = 0x6
  0x8c9d: MOV R1, R5
  0x8ca9: ADD R1, R12
  0x8cb2: MOV R4, [R1]
  0x8cca: ZERO R0
  0x8ccd: ZERO R1
  0x8cd0: MemSub [0x4] -= [0x3] // 
block_0x8cd3:
  0x8cd3: BOUNDS_CHECK R4 R0
block_0x8ce8:
  0x8ce8: ADD R1, R5
  0x8cf1: ADD R1, R12
  0x8cfa: MOV [R1], R4
  0x8d2a: BUF_LOAD R3, [R7 + [0x8d3f]], [0x8d91] // mem[0x8d3f] = 0x2, mem[0x8d91] = 0x7
  0x8dda: MOV R1, R5
  0x8de6: ADD R1, R12
  0x8def: MOV R4, [R1]
  0x8e07: ADD R4, R3
  0x8e13: BOUNDS_CHECK R4 R0
block_0x8e2b:
  0x8e2b: ADD R4, R3
  0x8e34: BOUNDS_CHECK R4 R0
block_0x8e4c:
  0x8e4c: ADD R1, R5
  0x8e55: ADD R1, R12
  0x8e5e: MOV [R1], R4
  0x8e8e: BUF_STORE [0x8f1a], [R7 + [0x8ea3]], [0x8ef5] // mem[0x8ea3] = 0x1, mem[0x8ef5] = 0x5
  0x8f66: BUF_LOAD R3, [R7 + [0x8f7b]], [0x8fcd] // mem[0x8f7b] = 0x2, mem[0x8fcd] = 0x1
  0x9016: MOV R1, R5
  0x9022: ADD R1, R12
  0x902b: MOV R4, [R1]
  0x9043: ZERO R0
  0x9046: ZERO R1
  0x9049: MemSub [0x4] -= [0x3] // 
block_0x904c:
  0x904c: BOUNDS_CHECK R4 R0
block_0x9061:
  0x9061: ADD R1, R5
  0x906a: ADD R1, R12
  0x9073: MOV [R1], R4
  0x90a3: BUF_LOAD R3, [R7 + [0x90b8]], [0x910a] // mem[0x90b8] = 0x2, mem[0x910a] = 0x3
  0x9153: MOV R1, R5
  0x915f: ADD R1, R12
  0x9168: MOV R4, [R1]
  0x9180: ADD R4, R3
  0x918c: BOUNDS_CHECK R4 R0
block_0x91a4:
  0x91a4: ADD R4, R3
  0x91ad: BOUNDS_CHECK R4 R0
block_0x91c5:
  0x91c5: ADD R1, R5
  0x91ce: ADD R1, R12
  0x91d7: MOV [R1], R4
  0x9207: BUF_LOAD R3, [R7 + [0x921c]], [0x926e] // mem[0x921c] = 0x2, mem[0x926e] = 0x4
  0x92b7: MOV R1, R5
  0x92c3: ADD R1, R12
  0x92cc: MOV R4, [R1]
  0x92e4: ADD R4, R3
  0x92f0: BOUNDS_CHECK R4 R0
block_0x9308:
  0x9308: ADD R1, R5
  0x9311: ADD R1, R12
  0x931a: MOV [R1], R4
  0x934a: BUF_LOAD R3, [R7 + [0x935f]], [0x93b1] // mem[0x935f] = 0x2, mem[0x93b1] = 0x5
  0x93fa: MOV R1, R5
  0x9406: ADD R1, R12
  0x940f: MOV R4, [R1]
  0x9427: ZERO R0
  0x942a: ZERO R1
  0x942d: MemSub [0x4] -= [0x3] // 
block_0x9430:
  0x9430: BOUNDS_CHECK R4 R0
block_0x9445:
  0x9445: ZERO R0
  0x9448: MemSub [0x4] -= [0x3] // 
block_0x944b:
  0x944b: BOUNDS_CHECK R4 R0
block_0x9460:
  0x9460: ZERO R0
  0x9463: MemSub [0x4] -= [0x3] // 
block_0x9466:
  0x9466: BOUNDS_CHECK R4 R0
block_0x947b:
  0x947b: ADD R1, R5
  0x9484: ADD R1, R12
  0x948d: MOV [R1], R4
  0x94bd: BUF_STORE [0x9549], [R7 + [0x94d2]], [0x9524] // mem[0x94d2] = 0x1, mem[0x9524] = 0x6
  0x9595: BUF_LOAD R3, [R7 + [0x95aa]], [0x95fc] // mem[0x95aa] = 0x2, mem[0x95fc] = 0x0
  0x9645: MOV R1, R5
  0x9651: ADD R1, R12
  0x965a: MOV R4, [R1]
  0x9672: ADD R4, R3
  0x967e: BOUNDS_CHECK R4 R0
block_0x9696:
  0x9696: ADD R4, R3
  0x969f: BOUNDS_CHECK R4 R0
block_0x96b7:
  0x96b7: ADD R1, R5
  0x96c0: ADD R1, R12
  0x96c9: MOV [R1], R4
  0x96f9: BUF_LOAD R3, [R7 + [0x970e]], [0x9760] // mem[0x970e] = 0x2, mem[0x9760] = 0x1
  0x97a9: MOV R1, R5
  0x97b5: ADD R1, R12
  0x97be: MOV R4, [R1]
  0x97d6: ADD R4, R3
  0x97e2: BOUNDS_CHECK R4 R0
block_0x97fa:
  0x97fa: ADD R1, R5
  0x9803: ADD R1, R12
  0x980c: MOV [R1], R4
  0x983c: BUF_LOAD R3, [R7 + [0x9851]], [0x98a3] // mem[0x9851] = 0x2, mem[0x98a3] = 0x3
  0x98ec: MOV R1, R5
  0x98f8: ADD R1, R12
  0x9901: MOV R4, [R1]
  0x9919: ADD R4, R3
  0x9925: BOUNDS_CHECK R4 R0
block_0x993d:
  0x993d: ADD R4, R3
  0x9946: BOUNDS_CHECK R4 R0
block_0x995e:
  0x995e: ADD R4, R3
  0x9967: BOUNDS_CHECK R4 R0
block_0x997f:
  0x997f: ADD R1, R5
  0x9988: ADD R1, R12
  0x9991: MOV [R1], R4
  0x99c1: BUF_LOAD R3, [R7 + [0x99d6]], [0x9a28] // mem[0x99d6] = 0x2, mem[0x9a28] = 0x4
  0x9a71: MOV R1, R5
  0x9a7d: ADD R1, R12
  0x9a86: MOV R4, [R1]
  0x9a9e: ZERO R0
  0x9aa1: ZERO R1
  0x9aa4: MemSub [0x4] -= [0x3] // 
block_0x9aa7:
  0x9aa7: BOUNDS_CHECK R4 R0
block_0x9abc:
  0x9abc: ADD R1, R5
  0x9ac5: ADD R1, R12
  0x9ace: MOV [R1], R4
  0x9afe: BUF_LOAD R3, [R7 + [0x9b13]], [0x9b65] // mem[0x9b13] = 0x2, mem[0x9b65] = 0x6
  0x9bae: MOV R1, R5
  0x9bba: ADD R1, R12
  0x9bc3: MOV R4, [R1]
  0x9bdb: ADD R4, R3
  0x9be7: BOUNDS_CHECK R4 R0
block_0x9bff:
  0x9bff: ADD R4, R3
  0x9c08: BOUNDS_CHECK R4 R0
block_0x9c20:
  0x9c20: ADD R1, R5
  0x9c29: ADD R1, R12
  0x9c32: MOV [R1], R4
  0x9c62: BUF_LOAD R3, [R7 + [0x9c77]], [0x9cc9] // mem[0x9c77] = 0x2, mem[0x9cc9] = 0x7
  0x9d12: MOV R1, R5
  0x9d1e: ADD R1, R12
  0x9d27: MOV R4, [R1]
  0x9d3f: ZERO R0
  0x9d42: ZERO R1
  0x9d45: MemSub [0x4] -= [0x3] // 
block_0x9d48:
  0x9d48: BOUNDS_CHECK R4 R0
block_0x9d5d:
  0x9d5d: ZERO R0
  0x9d60: MemSub [0x4] -= [0x3] // 
block_0x9d63:
  0x9d63: BOUNDS_CHECK R4 R0
block_0x9d78:
  0x9d78: ADD R1, R5
  0x9d81: ADD R1, R12
  0x9d8a: MOV [R1], R4
  0x9dba: BUF_STORE [0x9e46], [R7 + [0x9dcf]], [0x9e21] // mem[0x9dcf] = 0x1, mem[0x9e21] = 0x7
  0x9e92: BUF_LOAD R3, [R7 + [0x9ea7]], [0x9ef9] // mem[0x9ea7] = 0x2, mem[0x9ef9] = 0x0
  0x9f42: MOV R1, R5
  0x9f4e: ADD R1, R12
  0x9f57: MOV R4, [R1]
  0x9f6f: ADD R4, R3
  0x9f7b: BOUNDS_CHECK R4 R0
block_0x9f93:
  0x9f93: ADD R1, R5
  0x9f9c: ADD R1, R12
  0x9fa5: MOV [R1], R4
  0x9fd5: BUF_LOAD R3, [R7 + [0x9fea]], [0xa03c] // mem[0x9fea] = 0x2, mem[0xa03c] = 0x1
  0xa085: MOV R1, R5
  0xa091: ADD R1, R12
  0xa09a: MOV R4, [R1]
  0xa0b2: ADD R4, R3
  0xa0be: BOUNDS_CHECK R4 R0
block_0xa0d6:
  0xa0d6: ADD R1, R5
  0xa0df: ADD R1, R12
  0xa0e8: MOV [R1], R4
  0xa118: BUF_LOAD R3, [R7 + [0xa12d]], [0xa17f] // mem[0xa12d] = 0x2, mem[0xa17f] = 0x4
  0xa1c8: MOV R1, R5
  0xa1d4: ADD R1, R12
  0xa1dd: MOV R4, [R1]
  0xa1f5: ZERO R0
  0xa1f8: ZERO R1
  0xa1fb: MemSub [0x4] -= [0x3] // 
block_0xa1fe:
  0xa1fe: BOUNDS_CHECK R4 R0
block_0xa213:
  0xa213: ZERO R0
  0xa216: MemSub [0x4] -= [0x3] // 
block_0xa219:
  0xa219: BOUNDS_CHECK R4 R0
block_0xa22e:
  0xa22e: ADD R1, R5
  0xa237: ADD R1, R12
  0xa240: MOV [R1], R4
  0xa270: BUF_LOAD R3, [R7 + [0xa285]], [0xa2d7] // mem[0xa285] = 0x2, mem[0xa2d7] = 0x5
  0xa320: MOV R1, R5
  0xa32c: ADD R1, R12
  0xa335: MOV R4, [R1]
  0xa34d: ZERO R0
  0xa350: ZERO R1
  0xa353: MemSub [0x4] -= [0x3] // 
block_0xa356:
  0xa356: BOUNDS_CHECK R4 R0
block_0xa36b:
  0xa36b: ADD R1, R5
  0xa374: ADD R1, R12
  0xa37d: MOV [R1], R4
  0xa3ad: BUF_LOAD R3, [R7 + [0xa3c2]], [0xa414] // mem[0xa3c2] = 0x2, mem[0xa414] = 0x6
  0xa45d: MOV R1, R5
  0xa469: ADD R1, R12
  0xa472: MOV R4, [R1]
  0xa48a: ADD R4, R3
  0xa496: BOUNDS_CHECK R4 R0
block_0xa4ae:
  0xa4ae: ADD R4, R3
  0xa4b7: BOUNDS_CHECK R4 R0
block_0xa4cf:
  0xa4cf: ADD R4, R3
  0xa4d8: BOUNDS_CHECK R4 R0
block_0xa4f0:
  0xa4f0: ADD R1, R5
  0xa4f9: ADD R1, R12
  0xa502: MOV [R1], R4
  0xa532: MOV R8, R7
  0xa541: POP R7 (shift=[0xa574]) // val = 0x0, offs = 0x1
block_0xa593:
  0xa593: POP R5 (shift=[0xa5c6]) // val = 0x0, offs = 0x1
block_0xa5e5:
  0xa5e5: POP R4 (shift=[0xa618]) // val = 0x0, offs = 0x1
block_0xa637:
  0xa637: POP R3 (shift=[0xa66a]) // val = 0x0, offs = 0x1
block_0xa689:
  0xa689: MOV R9, R3
  0xa698: ADD R1, R3
  0xa6a1: ADD R1, R13
  0xa6aa: JMP [R1]

// memcpy
func_0xa6c8:
  0xa6c8: MOV R3, R8
  0xa6d1: ZERO R0
  0xa6d4: PUSH R4 (shift=[0xa6d7]) // val = 0x0, offs = 0x1
  0xa73e: ZERO R0
  0xa741: ZERO R1
  0xa744: PUSH R5 (shift=[0xa747]) // val = 0x0, offs = 0x1
  0xa7ae: ZERO R0
  0xa7b1: ZERO R1
  0xa7b4: PUSH R6 (shift=[0xa7b7]) // val = 0x0, offs = 0x1
  0xa81e: ZERO R0
  0xa821: ZERO R1
  0xa824: PUSH R7 (shift=[0xa827]) // val = 0x0, offs = 0x1
  0xa88e: MOV R7, R8
  0xa89d: ZERO R0
  0xa8a0: MemSub [0x8] -= [0xa8a3] //  // mem[0xa8a3] = 0x0
block_0xa8a7:
  0xa8a7: BOUNDS_CHECK R8 R0
block_0xa8bc:
  0xa8bc: MOV R6, [0xa8c2] // mem[0xa8c2] = 0x0
  0xa8cc: PEEK R3, [R7 + [0xa8de]] # ARG3
  0xa927: ADD R3, R6
  0xa933: BOUNDS_CHECK R3 R0
block_0xa94b:
  0xa94b: BUF_LOAD R4, [R7 + [0xa95d]], R6 # buf 2
  0xa9f4: MOV R1, R3
  0xaa00: ADD R1, R12
  0xaa09: MOV [R1], R4
  0xaa39: ADD R6, [0xaa42] // mem[0xaa42] = 0x1
  0xaa49: BOUNDS_CHECK R6 R0
block_0xaa61:
  0xaa61: ZERO R0
  0xaa64: JMP 0xaa6c
block_0xaa68:
  0xaa68: ADD R1, R6
  0xaa72: Jne [0x1] != [0xaa67] block_0xaa84 block_0xaac0 // mem[0xaa67] = 0x8
block_0xaa84:
  0xaa84: VTABLEJMP  offset R13
  - target block_0xa8cf
block_0xaac0:
  0xaac0: ZERO R1
block_0xaac3:
  0xaac3: MOV R8, R7
  0xaacc: POP R7 (shift=[0xaaff]) // val = 0x0, offs = 0x1
block_0xab1e:
  0xab1e: POP R6 (shift=[0xab51]) // val = 0x0, offs = 0x1
block_0xab70:
  0xab70: POP R5 (shift=[0xaba3]) // val = 0x0, offs = 0x1
block_0xabc2:
  0xabc2: POP R4 (shift=[0xabf5]) // val = 0x0, offs = 0x1
block_0xac14:
  0xac14: POP R3 (shift=[0xac47]) // val = 0x0, offs = 0x1
block_0xac66:
  0xac66: MOV R9, R3
  0xac75: ADD R1, R3
  0xac7e: ADD R1, R13
  0xac87: JMP [R1]
lift_indirect_jump: 57 replacements
lift_zeroes_4: 178 replacements
lift_zeroes_5: 335 replacements
lift_peek: 112 replacements
lift_buf_store: 16 replacements
lift_jne: 4 replacements
lift_zero_add: 1614 replacements
lift_zeroes_2: 150 replacements
lift_jeq: 2 replacements
lift_mov_mem_indirect: 968 replacements
lift_mov: 6650 replacements
lift_call: 10 replacements
lift_assert1: 437 replacements
lift_store_indirect_2: 385 replacements
lift_zeroes_1: 990 replacements
lift_pop: 19 replacements
lift_store_indirect_1: 57 replacements
lift_jumptable: 42 replacements
lift_push: 24 replacements
lift_zeroes_3: 122 replacements
lift_store: 114 replacements
remove_unnecessary_jumps: 351 replacements
lift_buf_load: 95 replacements
