from pwn import *
ns = b"J\x00\x00\x00\x00\x00\x00\x00U\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00\x00\x00\x00\x00y\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x95\x00\x00\x00\x00\x00\x00\x00\xae\x00\x00\x00\x00\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x00\x00\x00\x00\xd5\x00\x00\x00\x00\x00\x00\x00\x06\x03\x00\x00\x00\x00\x00\x00\xc8\x1a\x00\x00\x00\x00\x00\x00\xba$\x00\x00\x00\x00\x00\x00\x00=\x00\x00\x00\x00\x00\x00\x01C\x00\x00\x00\x00\x00\x00&V\x00\x00\x00\x00\x00\x00\xd9j\x00\x00\x00\x00\x00\x00\x03q\x00\x00\x00\x00\x00\x00\x1b\x90\x00\x00\x00\x00\x00\x00\x03\x9e\x00\x00\x00\x00\x00\x00\xb6_\x1e\x00\x00\x00\x00\x00d\xf7&\x00\x00\x00\x00\x00\x9e\xbd0\x00\x00\x00\x00\x00xv@\x00\x00\x00\x00\x00;\x17[\x00\x00\x00\x00\x00\xb1\xe3o\x00\x00\x00\x00\x00%\xefx\x00\x00\x00\x00\x00_\x8e\x85\x00\x00\x00\x00\x009\xc6\x98\x00\x00\x00\x00\x00\xf6j\xad\x00\x00\x00\x00\x00\x96\x00\x08\x01\x00\x00\x00\x00\xcd\x08\x8e\x01\x00\x00\x00\x00\x07a\xbb\x01\x00\x00\x00\x00\xf1\x0f\xf5\x01\x00\x00\x00\x00'c\\\x02\x00\x00\x00\x00\xb6q\xa9\x02\x00\x00\x00\x00\x93\x84\xd6\x02\x00\x00\x00\x00\xc0\xf0b\x03\x00\x00\x00\x00\xad\x8ex\x03\x00\x00\x00\x00\xed\xa8\xca\x03\x00\x00\x00\x00"
ns = [u64(ns[i:i+8]) for i in range(0, len(ns), 8)]

print(ns)

perrin_pseudoprimes = [271441, 904631, 16532714, 24658561, 27422714, 27664033, 46672291, 102690901, 130944133, 196075949, 214038533, 517697641, 545670533, 801123451, 855073301, 903136901, 970355431, 1091327579, 1133818561, 1235188597, 1389675541, 1502682721, 2059739221, 2304156469, 2976407809, 3273820903]

'''
run in sage:

def merge(first, second):
    first = iter(first)
    second = iter(second)
    exhausted = object()
    f = next(first, exhausted)
    if f is exhausted:
        yield from second
    s = next(second, exhausted)
    if s is exhausted:
        yield f
        yield from first
        return
    while True:
        if f is exhausted:
            if s is not exhausted:
                yield s
            yield from second
            return
        elif s is exhausted:
            if f is not exhausted:
                yield f
            yield from first
            return
        elif f < s:
            yield f
            f = next(first, exhausted)
        elif f == s:
            yield f
            yield s
            f = next(first, exhausted)
            s = next(second, exhausted)
        else:
            yield s
            s = next(second, exhausted)

p = merge(Primes(), perrin_pseudoprimes)
ans = []

i = 1
for j in range(len(ns)):
    while i < ns[j]:
        x = next(p)
        i += 1
    print(x, j, len(ns))
    ans.append(x)
'''

ans = [367,
 433,
 601,
 659,
 709,
 857,
 1031,
 1151,
 1213,
 1301,
 5869,
 69001,
 97829,
 171403,
 189817,
 250057,
 316907,
 336671,
 439381,
 486043,
 32290273,
 42106541,
 53430163,
 71926277,
 103839499,
 129151741,
 140250893,
 155813731,
 179656781,
 205471907,
 320518027,
 494588399,
 554258491,
 630613979,
 768531989,
 872167259,
 933088577,
 1124023591,
 1153586513,
 1266125737]


xors = b"<\x00\x00\x00\x00\x00\x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\xd9\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\xd4\x00\x00\x00\x00\x00\x00\x00\x95\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00i\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}\x00\x00\x00\x00\x00\x00\x00\x95\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xd9\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\xeb\x00\x00\x00\x00\x00\x00\x00'\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00\x00\x00\x00\x00u\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x007\x00\x00\x00\x00\x00\x00\x00\xd4\x00\x00\x00\x00\x00\x00\x00"
xors = [u64(xors[i:i+8]) for i in range(0, len(xors), 8)]

for i,j in zip(ans, xors):
    print(chr((i ^ j) & 0xff), end='')
